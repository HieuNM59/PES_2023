
Pes_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080028dc  080028dc  000128dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a68  08002a68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a68  08002a68  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a68  08002a68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a68  08002a68  00012a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a6c  08002a6c  00012a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08002a7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002a7c  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000738c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b59  00000000  00000000  000273c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  00028f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  00029690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166a6  00000000  00000000  00029d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ef0  00000000  00000000  000403ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007eb08  00000000  00000000  000492de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c7de6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bc4  00000000  00000000  000c7e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028c4 	.word	0x080028c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080028c4 	.word	0x080028c4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa3a 	bl	80005c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f812 	bl	800017c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ba 	bl	80002d0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800015c:	f000 f88e 	bl	800027c <MX_USART3_UART_Init>
  MX_IWDG_Init();
 8000160:	f000 f848 	bl	80001f4 <MX_IWDG_Init>
  MX_USART2_UART_Init();
 8000164:	f000 f860 	bl	8000228 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  main_Init();
 8000168:	f002 f808 	bl	800217c <main_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  main_process();
 800016c:	f002 f8d2 	bl	8002314 <main_process>
	  HAL_IWDG_Refresh(&hiwdg);
 8000170:	4801      	ldr	r0, [pc, #4]	; (8000178 <main+0x2c>)
 8000172:	f000 fe3e 	bl	8000df2 <HAL_IWDG_Refresh>
	  main_process();
 8000176:	e7f9      	b.n	800016c <main+0x20>
 8000178:	20000028 	.word	0x20000028

0800017c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b090      	sub	sp, #64	; 0x40
 8000180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000182:	f107 0318 	add.w	r3, r7, #24
 8000186:	2228      	movs	r2, #40	; 0x28
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f002 fb92 	bl	80028b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]
 800019c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800019e:	2309      	movs	r3, #9
 80001a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80001a8:	2301      	movs	r3, #1
 80001aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ac:	2300      	movs	r3, #0
 80001ae:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b0:	f107 0318 	add.w	r3, r7, #24
 80001b4:	4618      	mov	r0, r3
 80001b6:	f000 fe2b 	bl	8000e10 <HAL_RCC_OscConfig>
 80001ba:	4603      	mov	r3, r0
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d001      	beq.n	80001c4 <SystemClock_Config+0x48>
  {
    Error_Handler();
 80001c0:	f000 f8de 	bl	8000380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c4:	230f      	movs	r3, #15
 80001c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80001c8:	2301      	movs	r3, #1
 80001ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001cc:	2300      	movs	r3, #0
 80001ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001d0:	2300      	movs	r3, #0
 80001d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2100      	movs	r1, #0
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 f899 	bl	8001314 <HAL_RCC_ClockConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x70>
  {
    Error_Handler();
 80001e8:	f000 f8ca 	bl	8000380 <Error_Handler>
  }
}
 80001ec:	bf00      	nop
 80001ee:	3740      	adds	r7, #64	; 0x40
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80001f8:	4b09      	ldr	r3, [pc, #36]	; (8000220 <MX_IWDG_Init+0x2c>)
 80001fa:	4a0a      	ldr	r2, [pc, #40]	; (8000224 <MX_IWDG_Init+0x30>)
 80001fc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 80001fe:	4b08      	ldr	r3, [pc, #32]	; (8000220 <MX_IWDG_Init+0x2c>)
 8000200:	2201      	movs	r2, #1
 8000202:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2500-1;
 8000204:	4b06      	ldr	r3, [pc, #24]	; (8000220 <MX_IWDG_Init+0x2c>)
 8000206:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800020a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <MX_IWDG_Init+0x2c>)
 800020e:	f000 fdae 	bl	8000d6e <HAL_IWDG_Init>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d001      	beq.n	800021c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000218:	f000 f8b2 	bl	8000380 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	20000028 	.word	0x20000028
 8000224:	40003000 	.word	0x40003000

08000228 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800022c:	4b11      	ldr	r3, [pc, #68]	; (8000274 <MX_USART2_UART_Init+0x4c>)
 800022e:	4a12      	ldr	r2, [pc, #72]	; (8000278 <MX_USART2_UART_Init+0x50>)
 8000230:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000232:	4b10      	ldr	r3, [pc, #64]	; (8000274 <MX_USART2_UART_Init+0x4c>)
 8000234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000238:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800023a:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <MX_USART2_UART_Init+0x4c>)
 800023c:	2200      	movs	r2, #0
 800023e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <MX_USART2_UART_Init+0x4c>)
 8000242:	2200      	movs	r2, #0
 8000244:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <MX_USART2_UART_Init+0x4c>)
 8000248:	2200      	movs	r2, #0
 800024a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <MX_USART2_UART_Init+0x4c>)
 800024e:	220c      	movs	r2, #12
 8000250:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <MX_USART2_UART_Init+0x4c>)
 8000254:	2200      	movs	r2, #0
 8000256:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <MX_USART2_UART_Init+0x4c>)
 800025a:	2200      	movs	r2, #0
 800025c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800025e:	4805      	ldr	r0, [pc, #20]	; (8000274 <MX_USART2_UART_Init+0x4c>)
 8000260:	f001 f9f0 	bl	8001644 <HAL_UART_Init>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800026a:	f000 f889 	bl	8000380 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	20000034 	.word	0x20000034
 8000278:	40004400 	.word	0x40004400

0800027c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000280:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <MX_USART3_UART_Init+0x4c>)
 8000282:	4a12      	ldr	r2, [pc, #72]	; (80002cc <MX_USART3_UART_Init+0x50>)
 8000284:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000286:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <MX_USART3_UART_Init+0x4c>)
 8000288:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800028c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <MX_USART3_UART_Init+0x4c>)
 8000290:	2200      	movs	r2, #0
 8000292:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000294:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <MX_USART3_UART_Init+0x4c>)
 8000296:	2200      	movs	r2, #0
 8000298:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <MX_USART3_UART_Init+0x4c>)
 800029c:	2200      	movs	r2, #0
 800029e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <MX_USART3_UART_Init+0x4c>)
 80002a2:	220c      	movs	r2, #12
 80002a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002a6:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <MX_USART3_UART_Init+0x4c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <MX_USART3_UART_Init+0x4c>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80002b2:	4805      	ldr	r0, [pc, #20]	; (80002c8 <MX_USART3_UART_Init+0x4c>)
 80002b4:	f001 f9c6 	bl	8001644 <HAL_UART_Init>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80002be:	f000 f85f 	bl	8000380 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	20000078 	.word	0x20000078
 80002cc:	40004800 	.word	0x40004800

080002d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b088      	sub	sp, #32
 80002d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d6:	f107 0310 	add.w	r3, r7, #16
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e4:	4b24      	ldr	r3, [pc, #144]	; (8000378 <MX_GPIO_Init+0xa8>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a23      	ldr	r2, [pc, #140]	; (8000378 <MX_GPIO_Init+0xa8>)
 80002ea:	f043 0320 	orr.w	r3, r3, #32
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b21      	ldr	r3, [pc, #132]	; (8000378 <MX_GPIO_Init+0xa8>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0320 	and.w	r3, r3, #32
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fc:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <MX_GPIO_Init+0xa8>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <MX_GPIO_Init+0xa8>)
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <MX_GPIO_Init+0xa8>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0304 	and.w	r3, r3, #4
 8000310:	60bb      	str	r3, [r7, #8]
 8000312:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000314:	4b18      	ldr	r3, [pc, #96]	; (8000378 <MX_GPIO_Init+0xa8>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a17      	ldr	r2, [pc, #92]	; (8000378 <MX_GPIO_Init+0xa8>)
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_GPIO_Init+0xa8>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0308 	and.w	r3, r3, #8
 8000328:	607b      	str	r3, [r7, #4]
 800032a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PES_CLK_Pin|PES_ATT_Pin|PES_CMD_Pin, GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000332:	4812      	ldr	r0, [pc, #72]	; (800037c <MX_GPIO_Init+0xac>)
 8000334:	f000 fd03 	bl	8000d3e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PES_CLK_Pin PES_ATT_Pin PES_CMD_Pin */
  GPIO_InitStruct.Pin = PES_CLK_Pin|PES_ATT_Pin|PES_CMD_Pin;
 8000338:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800033c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033e:	2301      	movs	r3, #1
 8000340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000342:	2300      	movs	r3, #0
 8000344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000346:	2301      	movs	r3, #1
 8000348:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	4619      	mov	r1, r3
 8000350:	480a      	ldr	r0, [pc, #40]	; (800037c <MX_GPIO_Init+0xac>)
 8000352:	f000 fb59 	bl	8000a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PES_DATA_Pin */
  GPIO_InitStruct.Pin = PES_DATA_Pin;
 8000356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800035a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800035c:	2300      	movs	r3, #0
 800035e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000360:	2301      	movs	r3, #1
 8000362:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PES_DATA_GPIO_Port, &GPIO_InitStruct);
 8000364:	f107 0310 	add.w	r3, r7, #16
 8000368:	4619      	mov	r1, r3
 800036a:	4804      	ldr	r0, [pc, #16]	; (800037c <MX_GPIO_Init+0xac>)
 800036c:	f000 fb4c 	bl	8000a08 <HAL_GPIO_Init>

}
 8000370:	bf00      	nop
 8000372:	3720      	adds	r7, #32
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40021000 	.word	0x40021000
 800037c:	40010c00 	.word	0x40010c00

08000380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000384:	b672      	cpsid	i
}
 8000386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000388:	e7fe      	b.n	8000388 <Error_Handler+0x8>
	...

0800038c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <HAL_MspInit+0x5c>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <HAL_MspInit+0x5c>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	6193      	str	r3, [r2, #24]
 800039e:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <HAL_MspInit+0x5c>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	60bb      	str	r3, [r7, #8]
 80003a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003aa:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <HAL_MspInit+0x5c>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	4a0e      	ldr	r2, [pc, #56]	; (80003e8 <HAL_MspInit+0x5c>)
 80003b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b4:	61d3      	str	r3, [r2, #28]
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <HAL_MspInit+0x5c>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003c2:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <HAL_MspInit+0x60>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	4a04      	ldr	r2, [pc, #16]	; (80003ec <HAL_MspInit+0x60>)
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003de:	bf00      	nop
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010000 	.word	0x40010000

080003f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b08a      	sub	sp, #40	; 0x28
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f8:	f107 0318 	add.w	r3, r7, #24
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a3b      	ldr	r2, [pc, #236]	; (80004f8 <HAL_UART_MspInit+0x108>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d130      	bne.n	8000472 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000410:	4b3a      	ldr	r3, [pc, #232]	; (80004fc <HAL_UART_MspInit+0x10c>)
 8000412:	69db      	ldr	r3, [r3, #28]
 8000414:	4a39      	ldr	r2, [pc, #228]	; (80004fc <HAL_UART_MspInit+0x10c>)
 8000416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800041a:	61d3      	str	r3, [r2, #28]
 800041c:	4b37      	ldr	r3, [pc, #220]	; (80004fc <HAL_UART_MspInit+0x10c>)
 800041e:	69db      	ldr	r3, [r3, #28]
 8000420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000424:	617b      	str	r3, [r7, #20]
 8000426:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	4b34      	ldr	r3, [pc, #208]	; (80004fc <HAL_UART_MspInit+0x10c>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a33      	ldr	r2, [pc, #204]	; (80004fc <HAL_UART_MspInit+0x10c>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b31      	ldr	r3, [pc, #196]	; (80004fc <HAL_UART_MspInit+0x10c>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0304 	and.w	r3, r3, #4
 800043c:	613b      	str	r3, [r7, #16]
 800043e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000440:	2304      	movs	r3, #4
 8000442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000444:	2302      	movs	r3, #2
 8000446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000448:	2303      	movs	r3, #3
 800044a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044c:	f107 0318 	add.w	r3, r7, #24
 8000450:	4619      	mov	r1, r3
 8000452:	482b      	ldr	r0, [pc, #172]	; (8000500 <HAL_UART_MspInit+0x110>)
 8000454:	f000 fad8 	bl	8000a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000458:	2308      	movs	r3, #8
 800045a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800045c:	2300      	movs	r3, #0
 800045e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000464:	f107 0318 	add.w	r3, r7, #24
 8000468:	4619      	mov	r1, r3
 800046a:	4825      	ldr	r0, [pc, #148]	; (8000500 <HAL_UART_MspInit+0x110>)
 800046c:	f000 facc 	bl	8000a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000470:	e03e      	b.n	80004f0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a23      	ldr	r2, [pc, #140]	; (8000504 <HAL_UART_MspInit+0x114>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d139      	bne.n	80004f0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 800047c:	4b1f      	ldr	r3, [pc, #124]	; (80004fc <HAL_UART_MspInit+0x10c>)
 800047e:	69db      	ldr	r3, [r3, #28]
 8000480:	4a1e      	ldr	r2, [pc, #120]	; (80004fc <HAL_UART_MspInit+0x10c>)
 8000482:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000486:	61d3      	str	r3, [r2, #28]
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <HAL_UART_MspInit+0x10c>)
 800048a:	69db      	ldr	r3, [r3, #28]
 800048c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000494:	4b19      	ldr	r3, [pc, #100]	; (80004fc <HAL_UART_MspInit+0x10c>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a18      	ldr	r2, [pc, #96]	; (80004fc <HAL_UART_MspInit+0x10c>)
 800049a:	f043 0308 	orr.w	r3, r3, #8
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b16      	ldr	r3, [pc, #88]	; (80004fc <HAL_UART_MspInit+0x10c>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0308 	and.w	r3, r3, #8
 80004a8:	60bb      	str	r3, [r7, #8]
 80004aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b2:	2302      	movs	r3, #2
 80004b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b6:	2303      	movs	r3, #3
 80004b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ba:	f107 0318 	add.w	r3, r7, #24
 80004be:	4619      	mov	r1, r3
 80004c0:	4811      	ldr	r0, [pc, #68]	; (8000508 <HAL_UART_MspInit+0x118>)
 80004c2:	f000 faa1 	bl	8000a08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80004c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80004ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d4:	f107 0318 	add.w	r3, r7, #24
 80004d8:	4619      	mov	r1, r3
 80004da:	480b      	ldr	r0, [pc, #44]	; (8000508 <HAL_UART_MspInit+0x118>)
 80004dc:	f000 fa94 	bl	8000a08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2100      	movs	r1, #0
 80004e4:	2027      	movs	r0, #39	; 0x27
 80004e6:	f000 f9a8 	bl	800083a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80004ea:	2027      	movs	r0, #39	; 0x27
 80004ec:	f000 f9c1 	bl	8000872 <HAL_NVIC_EnableIRQ>
}
 80004f0:	bf00      	nop
 80004f2:	3728      	adds	r7, #40	; 0x28
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40004400 	.word	0x40004400
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010800 	.word	0x40010800
 8000504:	40004800 	.word	0x40004800
 8000508:	40010c00 	.word	0x40010c00

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <NMI_Handler+0x4>

08000512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <HardFault_Handler+0x4>

08000518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <MemManage_Handler+0x4>

0800051e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <BusFault_Handler+0x4>

08000524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <UsageFault_Handler+0x4>

0800052a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr

08000536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr

08000542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000552:	f000 f87f 	bl	8000654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000560:	4802      	ldr	r0, [pc, #8]	; (800056c <USART3_IRQHandler+0x10>)
 8000562:	f001 f97f 	bl	8001864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000078 	.word	0x20000078

08000570 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800057c:	480c      	ldr	r0, [pc, #48]	; (80005b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800057e:	490d      	ldr	r1, [pc, #52]	; (80005b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000580:	4a0d      	ldr	r2, [pc, #52]	; (80005b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000584:	e002      	b.n	800058c <LoopCopyDataInit>

08000586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058a:	3304      	adds	r3, #4

0800058c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800058c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000590:	d3f9      	bcc.n	8000586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000592:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000594:	4c0a      	ldr	r4, [pc, #40]	; (80005c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000598:	e001      	b.n	800059e <LoopFillZerobss>

0800059a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800059c:	3204      	adds	r2, #4

0800059e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a0:	d3fb      	bcc.n	800059a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005a2:	f7ff ffe5 	bl	8000570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005a6:	f002 f961 	bl	800286c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005aa:	f7ff fdcf 	bl	800014c <main>
  bx lr
 80005ae:	4770      	bx	lr
  ldr r0, =_sdata
 80005b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005b8:	08002a70 	.word	0x08002a70
  ldr r2, =_sbss
 80005bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005c0:	200000d4 	.word	0x200000d4

080005c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c4:	e7fe      	b.n	80005c4 <ADC1_2_IRQHandler>
	...

080005c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <HAL_Init+0x28>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <HAL_Init+0x28>)
 80005d2:	f043 0310 	orr.w	r3, r3, #16
 80005d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d8:	2003      	movs	r0, #3
 80005da:	f000 f923 	bl	8000824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005de:	200f      	movs	r0, #15
 80005e0:	f000 f808 	bl	80005f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e4:	f7ff fed2 	bl	800038c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40022000 	.word	0x40022000

080005f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_InitTick+0x54>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <HAL_InitTick+0x58>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4619      	mov	r1, r3
 8000606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060a:	fbb3 f3f1 	udiv	r3, r3, r1
 800060e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f93b 	bl	800088e <HAL_SYSTICK_Config>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
 8000620:	e00e      	b.n	8000640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b0f      	cmp	r3, #15
 8000626:	d80a      	bhi.n	800063e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000628:	2200      	movs	r2, #0
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	f04f 30ff 	mov.w	r0, #4294967295
 8000630:	f000 f903 	bl	800083a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000634:	4a06      	ldr	r2, [pc, #24]	; (8000650 <HAL_InitTick+0x5c>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800063a:	2300      	movs	r3, #0
 800063c:	e000      	b.n	8000640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000000 	.word	0x20000000
 800064c:	20000008 	.word	0x20000008
 8000650:	20000004 	.word	0x20000004

08000654 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <HAL_IncTick+0x1c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <HAL_IncTick+0x20>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4413      	add	r3, r2
 8000664:	4a03      	ldr	r2, [pc, #12]	; (8000674 <HAL_IncTick+0x20>)
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	20000008 	.word	0x20000008
 8000674:	200000bc 	.word	0x200000bc

08000678 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return uwTick;
 800067c:	4b02      	ldr	r3, [pc, #8]	; (8000688 <HAL_GetTick+0x10>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr
 8000688:	200000bc 	.word	0x200000bc

0800068c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f003 0307 	and.w	r3, r3, #7
 800069a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006a8:	4013      	ands	r3, r2
 80006aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006be:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	60d3      	str	r3, [r2, #12]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <__NVIC_GetPriorityGrouping+0x18>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	0a1b      	lsrs	r3, r3, #8
 80006de:	f003 0307 	and.w	r3, r3, #7
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	db0b      	blt.n	800071a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	f003 021f 	and.w	r2, r3, #31
 8000708:	4906      	ldr	r1, [pc, #24]	; (8000724 <__NVIC_EnableIRQ+0x34>)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	095b      	lsrs	r3, r3, #5
 8000710:	2001      	movs	r0, #1
 8000712:	fa00 f202 	lsl.w	r2, r0, r2
 8000716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	e000e100 	.word	0xe000e100

08000728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	db0a      	blt.n	8000752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	490c      	ldr	r1, [pc, #48]	; (8000774 <__NVIC_SetPriority+0x4c>)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	0112      	lsls	r2, r2, #4
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	440b      	add	r3, r1
 800074c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000750:	e00a      	b.n	8000768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4908      	ldr	r1, [pc, #32]	; (8000778 <__NVIC_SetPriority+0x50>)
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	f003 030f 	and.w	r3, r3, #15
 800075e:	3b04      	subs	r3, #4
 8000760:	0112      	lsls	r2, r2, #4
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	440b      	add	r3, r1
 8000766:	761a      	strb	r2, [r3, #24]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000e100 	.word	0xe000e100
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800077c:	b480      	push	{r7}
 800077e:	b089      	sub	sp, #36	; 0x24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	f1c3 0307 	rsb	r3, r3, #7
 8000796:	2b04      	cmp	r3, #4
 8000798:	bf28      	it	cs
 800079a:	2304      	movcs	r3, #4
 800079c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3304      	adds	r3, #4
 80007a2:	2b06      	cmp	r3, #6
 80007a4:	d902      	bls.n	80007ac <NVIC_EncodePriority+0x30>
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3b03      	subs	r3, #3
 80007aa:	e000      	b.n	80007ae <NVIC_EncodePriority+0x32>
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	f04f 32ff 	mov.w	r2, #4294967295
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	43da      	mvns	r2, r3
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	401a      	ands	r2, r3
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c4:	f04f 31ff 	mov.w	r1, #4294967295
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	fa01 f303 	lsl.w	r3, r1, r3
 80007ce:	43d9      	mvns	r1, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	4313      	orrs	r3, r2
         );
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3724      	adds	r7, #36	; 0x24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007f0:	d301      	bcc.n	80007f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00f      	b.n	8000816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <SysTick_Config+0x40>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007fe:	210f      	movs	r1, #15
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	f7ff ff90 	bl	8000728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <SysTick_Config+0x40>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800080e:	4b04      	ldr	r3, [pc, #16]	; (8000820 <SysTick_Config+0x40>)
 8000810:	2207      	movs	r2, #7
 8000812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	e000e010 	.word	0xe000e010

08000824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff ff2d 	bl	800068c <__NVIC_SetPriorityGrouping>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800083a:	b580      	push	{r7, lr}
 800083c:	b086      	sub	sp, #24
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	60b9      	str	r1, [r7, #8]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800084c:	f7ff ff42 	bl	80006d4 <__NVIC_GetPriorityGrouping>
 8000850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	68b9      	ldr	r1, [r7, #8]
 8000856:	6978      	ldr	r0, [r7, #20]
 8000858:	f7ff ff90 	bl	800077c <NVIC_EncodePriority>
 800085c:	4602      	mov	r2, r0
 800085e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000862:	4611      	mov	r1, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff5f 	bl	8000728 <__NVIC_SetPriority>
}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	4603      	mov	r3, r0
 800087a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800087c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff35 	bl	80006f0 <__NVIC_EnableIRQ>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff ffa2 	bl	80007e0 <SysTick_Config>
 800089c:	4603      	mov	r3, r0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b085      	sub	sp, #20
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008ae:	2300      	movs	r3, #0
 80008b0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d008      	beq.n	80008ce <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2204      	movs	r2, #4
 80008c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e020      	b.n	8000910 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f022 020e 	bic.w	r2, r2, #14
 80008dc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f022 0201 	bic.w	r2, r2, #1
 80008ec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008f6:	2101      	movs	r1, #1
 80008f8:	fa01 f202 	lsl.w	r2, r1, r2
 80008fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2201      	movs	r2, #1
 8000902:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800090e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
	...

0800091c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000924:	2300      	movs	r3, #0
 8000926:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800092e:	2b02      	cmp	r3, #2
 8000930:	d005      	beq.n	800093e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2204      	movs	r2, #4
 8000936:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000938:	2301      	movs	r3, #1
 800093a:	73fb      	strb	r3, [r7, #15]
 800093c:	e051      	b.n	80009e2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f022 020e 	bic.w	r2, r2, #14
 800094c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f022 0201 	bic.w	r2, r2, #1
 800095c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a22      	ldr	r2, [pc, #136]	; (80009ec <HAL_DMA_Abort_IT+0xd0>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d029      	beq.n	80009bc <HAL_DMA_Abort_IT+0xa0>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a20      	ldr	r2, [pc, #128]	; (80009f0 <HAL_DMA_Abort_IT+0xd4>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d022      	beq.n	80009b8 <HAL_DMA_Abort_IT+0x9c>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a1f      	ldr	r2, [pc, #124]	; (80009f4 <HAL_DMA_Abort_IT+0xd8>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d01a      	beq.n	80009b2 <HAL_DMA_Abort_IT+0x96>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a1d      	ldr	r2, [pc, #116]	; (80009f8 <HAL_DMA_Abort_IT+0xdc>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d012      	beq.n	80009ac <HAL_DMA_Abort_IT+0x90>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a1c      	ldr	r2, [pc, #112]	; (80009fc <HAL_DMA_Abort_IT+0xe0>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d00a      	beq.n	80009a6 <HAL_DMA_Abort_IT+0x8a>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a1a      	ldr	r2, [pc, #104]	; (8000a00 <HAL_DMA_Abort_IT+0xe4>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d102      	bne.n	80009a0 <HAL_DMA_Abort_IT+0x84>
 800099a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800099e:	e00e      	b.n	80009be <HAL_DMA_Abort_IT+0xa2>
 80009a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009a4:	e00b      	b.n	80009be <HAL_DMA_Abort_IT+0xa2>
 80009a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009aa:	e008      	b.n	80009be <HAL_DMA_Abort_IT+0xa2>
 80009ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b0:	e005      	b.n	80009be <HAL_DMA_Abort_IT+0xa2>
 80009b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b6:	e002      	b.n	80009be <HAL_DMA_Abort_IT+0xa2>
 80009b8:	2310      	movs	r3, #16
 80009ba:	e000      	b.n	80009be <HAL_DMA_Abort_IT+0xa2>
 80009bc:	2301      	movs	r3, #1
 80009be:	4a11      	ldr	r2, [pc, #68]	; (8000a04 <HAL_DMA_Abort_IT+0xe8>)
 80009c0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2201      	movs	r2, #1
 80009c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	4798      	blx	r3
    } 
  }
  return status;
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40020008 	.word	0x40020008
 80009f0:	4002001c 	.word	0x4002001c
 80009f4:	40020030 	.word	0x40020030
 80009f8:	40020044 	.word	0x40020044
 80009fc:	40020058 	.word	0x40020058
 8000a00:	4002006c 	.word	0x4002006c
 8000a04:	40020000 	.word	0x40020000

08000a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b08b      	sub	sp, #44	; 0x2c
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a1a:	e169      	b.n	8000cf0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	69fa      	ldr	r2, [r7, #28]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	f040 8158 	bne.w	8000cea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	4a9a      	ldr	r2, [pc, #616]	; (8000ca8 <HAL_GPIO_Init+0x2a0>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d05e      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
 8000a44:	4a98      	ldr	r2, [pc, #608]	; (8000ca8 <HAL_GPIO_Init+0x2a0>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d875      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a4a:	4a98      	ldr	r2, [pc, #608]	; (8000cac <HAL_GPIO_Init+0x2a4>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d058      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
 8000a50:	4a96      	ldr	r2, [pc, #600]	; (8000cac <HAL_GPIO_Init+0x2a4>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d86f      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a56:	4a96      	ldr	r2, [pc, #600]	; (8000cb0 <HAL_GPIO_Init+0x2a8>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d052      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
 8000a5c:	4a94      	ldr	r2, [pc, #592]	; (8000cb0 <HAL_GPIO_Init+0x2a8>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d869      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a62:	4a94      	ldr	r2, [pc, #592]	; (8000cb4 <HAL_GPIO_Init+0x2ac>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d04c      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
 8000a68:	4a92      	ldr	r2, [pc, #584]	; (8000cb4 <HAL_GPIO_Init+0x2ac>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d863      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a6e:	4a92      	ldr	r2, [pc, #584]	; (8000cb8 <HAL_GPIO_Init+0x2b0>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d046      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
 8000a74:	4a90      	ldr	r2, [pc, #576]	; (8000cb8 <HAL_GPIO_Init+0x2b0>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d85d      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a7a:	2b12      	cmp	r3, #18
 8000a7c:	d82a      	bhi.n	8000ad4 <HAL_GPIO_Init+0xcc>
 8000a7e:	2b12      	cmp	r3, #18
 8000a80:	d859      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a82:	a201      	add	r2, pc, #4	; (adr r2, 8000a88 <HAL_GPIO_Init+0x80>)
 8000a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a88:	08000b03 	.word	0x08000b03
 8000a8c:	08000add 	.word	0x08000add
 8000a90:	08000aef 	.word	0x08000aef
 8000a94:	08000b31 	.word	0x08000b31
 8000a98:	08000b37 	.word	0x08000b37
 8000a9c:	08000b37 	.word	0x08000b37
 8000aa0:	08000b37 	.word	0x08000b37
 8000aa4:	08000b37 	.word	0x08000b37
 8000aa8:	08000b37 	.word	0x08000b37
 8000aac:	08000b37 	.word	0x08000b37
 8000ab0:	08000b37 	.word	0x08000b37
 8000ab4:	08000b37 	.word	0x08000b37
 8000ab8:	08000b37 	.word	0x08000b37
 8000abc:	08000b37 	.word	0x08000b37
 8000ac0:	08000b37 	.word	0x08000b37
 8000ac4:	08000b37 	.word	0x08000b37
 8000ac8:	08000b37 	.word	0x08000b37
 8000acc:	08000ae5 	.word	0x08000ae5
 8000ad0:	08000af9 	.word	0x08000af9
 8000ad4:	4a79      	ldr	r2, [pc, #484]	; (8000cbc <HAL_GPIO_Init+0x2b4>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d013      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ada:	e02c      	b.n	8000b36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	623b      	str	r3, [r7, #32]
          break;
 8000ae2:	e029      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	623b      	str	r3, [r7, #32]
          break;
 8000aec:	e024      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	3308      	adds	r3, #8
 8000af4:	623b      	str	r3, [r7, #32]
          break;
 8000af6:	e01f      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	330c      	adds	r3, #12
 8000afe:	623b      	str	r3, [r7, #32]
          break;
 8000b00:	e01a      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d102      	bne.n	8000b10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	623b      	str	r3, [r7, #32]
          break;
 8000b0e:	e013      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d105      	bne.n	8000b24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	69fa      	ldr	r2, [r7, #28]
 8000b20:	611a      	str	r2, [r3, #16]
          break;
 8000b22:	e009      	b.n	8000b38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b24:	2308      	movs	r3, #8
 8000b26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	615a      	str	r2, [r3, #20]
          break;
 8000b2e:	e003      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
          break;
 8000b34:	e000      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          break;
 8000b36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	2bff      	cmp	r3, #255	; 0xff
 8000b3c:	d801      	bhi.n	8000b42 <HAL_GPIO_Init+0x13a>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	e001      	b.n	8000b46 <HAL_GPIO_Init+0x13e>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3304      	adds	r3, #4
 8000b46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	2bff      	cmp	r3, #255	; 0xff
 8000b4c:	d802      	bhi.n	8000b54 <HAL_GPIO_Init+0x14c>
 8000b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	e002      	b.n	8000b5a <HAL_GPIO_Init+0x152>
 8000b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b56:	3b08      	subs	r3, #8
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	210f      	movs	r1, #15
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	6a39      	ldr	r1, [r7, #32]
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	fa01 f303 	lsl.w	r3, r1, r3
 8000b74:	431a      	orrs	r2, r3
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f000 80b1 	beq.w	8000cea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b88:	4b4d      	ldr	r3, [pc, #308]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a4c      	ldr	r2, [pc, #304]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b4a      	ldr	r3, [pc, #296]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ba0:	4a48      	ldr	r2, [pc, #288]	; (8000cc4 <HAL_GPIO_Init+0x2bc>)
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	089b      	lsrs	r3, r3, #2
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	220f      	movs	r2, #15
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a40      	ldr	r2, [pc, #256]	; (8000cc8 <HAL_GPIO_Init+0x2c0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d013      	beq.n	8000bf4 <HAL_GPIO_Init+0x1ec>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a3f      	ldr	r2, [pc, #252]	; (8000ccc <HAL_GPIO_Init+0x2c4>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d00d      	beq.n	8000bf0 <HAL_GPIO_Init+0x1e8>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a3e      	ldr	r2, [pc, #248]	; (8000cd0 <HAL_GPIO_Init+0x2c8>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d007      	beq.n	8000bec <HAL_GPIO_Init+0x1e4>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a3d      	ldr	r2, [pc, #244]	; (8000cd4 <HAL_GPIO_Init+0x2cc>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d101      	bne.n	8000be8 <HAL_GPIO_Init+0x1e0>
 8000be4:	2303      	movs	r3, #3
 8000be6:	e006      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000be8:	2304      	movs	r3, #4
 8000bea:	e004      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000bec:	2302      	movs	r3, #2
 8000bee:	e002      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bf8:	f002 0203 	and.w	r2, r2, #3
 8000bfc:	0092      	lsls	r2, r2, #2
 8000bfe:	4093      	lsls	r3, r2
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c06:	492f      	ldr	r1, [pc, #188]	; (8000cc4 <HAL_GPIO_Init+0x2bc>)
 8000c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	3302      	adds	r3, #2
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d006      	beq.n	8000c2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c20:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	492c      	ldr	r1, [pc, #176]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	600b      	str	r3, [r1, #0]
 8000c2c:	e006      	b.n	8000c3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	4928      	ldr	r1, [pc, #160]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d006      	beq.n	8000c56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c48:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c4a:	685a      	ldr	r2, [r3, #4]
 8000c4c:	4922      	ldr	r1, [pc, #136]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	604b      	str	r3, [r1, #4]
 8000c54:	e006      	b.n	8000c64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	491e      	ldr	r1, [pc, #120]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c60:	4013      	ands	r3, r2
 8000c62:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d006      	beq.n	8000c7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	4918      	ldr	r1, [pc, #96]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	608b      	str	r3, [r1, #8]
 8000c7c:	e006      	b.n	8000c8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	4914      	ldr	r1, [pc, #80]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c88:	4013      	ands	r3, r2
 8000c8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d021      	beq.n	8000cdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	490e      	ldr	r1, [pc, #56]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	60cb      	str	r3, [r1, #12]
 8000ca4:	e021      	b.n	8000cea <HAL_GPIO_Init+0x2e2>
 8000ca6:	bf00      	nop
 8000ca8:	10320000 	.word	0x10320000
 8000cac:	10310000 	.word	0x10310000
 8000cb0:	10220000 	.word	0x10220000
 8000cb4:	10210000 	.word	0x10210000
 8000cb8:	10120000 	.word	0x10120000
 8000cbc:	10110000 	.word	0x10110000
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010000 	.word	0x40010000
 8000cc8:	40010800 	.word	0x40010800
 8000ccc:	40010c00 	.word	0x40010c00
 8000cd0:	40011000 	.word	0x40011000
 8000cd4:	40011400 	.word	0x40011400
 8000cd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_GPIO_Init+0x304>)
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	4909      	ldr	r1, [pc, #36]	; (8000d0c <HAL_GPIO_Init+0x304>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	3301      	adds	r3, #1
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f47f ae8e 	bne.w	8000a1c <HAL_GPIO_Init+0x14>
  }
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	372c      	adds	r7, #44	; 0x2c
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	40010400 	.word	0x40010400

08000d10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689a      	ldr	r2, [r3, #8]
 8000d20:	887b      	ldrh	r3, [r7, #2]
 8000d22:	4013      	ands	r3, r2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d002      	beq.n	8000d2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	73fb      	strb	r3, [r7, #15]
 8000d2c:	e001      	b.n	8000d32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr

08000d3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	460b      	mov	r3, r1
 8000d48:	807b      	strh	r3, [r7, #2]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d4e:	787b      	ldrb	r3, [r7, #1]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d54:	887a      	ldrh	r2, [r7, #2]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d5a:	e003      	b.n	8000d64 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d5c:	887b      	ldrh	r3, [r7, #2]
 8000d5e:	041a      	lsls	r2, r3, #16
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	611a      	str	r2, [r3, #16]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b084      	sub	sp, #16
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d101      	bne.n	8000d80 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e034      	b.n	8000dea <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8000d88:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f245 5255 	movw	r2, #21845	; 0x5555
 8000d92:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	6852      	ldr	r2, [r2, #4]
 8000d9c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	6892      	ldr	r2, [r2, #8]
 8000da6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8000da8:	f7ff fc66 	bl	8000678 <HAL_GetTick>
 8000dac:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000dae:	e00f      	b.n	8000dd0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8000db0:	f7ff fc62 	bl	8000678 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b27      	cmp	r3, #39	; 0x27
 8000dbc:	d908      	bls.n	8000dd0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	e00c      	b.n	8000dea <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1e8      	bne.n	8000db0 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000de6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000e02:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e272      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f000 8087 	beq.w	8000f3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e30:	4b92      	ldr	r3, [pc, #584]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 030c 	and.w	r3, r3, #12
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d00c      	beq.n	8000e56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e3c:	4b8f      	ldr	r3, [pc, #572]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 030c 	and.w	r3, r3, #12
 8000e44:	2b08      	cmp	r3, #8
 8000e46:	d112      	bne.n	8000e6e <HAL_RCC_OscConfig+0x5e>
 8000e48:	4b8c      	ldr	r3, [pc, #560]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e54:	d10b      	bne.n	8000e6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e56:	4b89      	ldr	r3, [pc, #548]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d06c      	beq.n	8000f3c <HAL_RCC_OscConfig+0x12c>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d168      	bne.n	8000f3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e24c      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e76:	d106      	bne.n	8000e86 <HAL_RCC_OscConfig+0x76>
 8000e78:	4b80      	ldr	r3, [pc, #512]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a7f      	ldr	r2, [pc, #508]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	e02e      	b.n	8000ee4 <HAL_RCC_OscConfig+0xd4>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10c      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x98>
 8000e8e:	4b7b      	ldr	r3, [pc, #492]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a7a      	ldr	r2, [pc, #488]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	4b78      	ldr	r3, [pc, #480]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a77      	ldr	r2, [pc, #476]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	e01d      	b.n	8000ee4 <HAL_RCC_OscConfig+0xd4>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eb0:	d10c      	bne.n	8000ecc <HAL_RCC_OscConfig+0xbc>
 8000eb2:	4b72      	ldr	r3, [pc, #456]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a71      	ldr	r2, [pc, #452]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	4b6f      	ldr	r3, [pc, #444]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a6e      	ldr	r2, [pc, #440]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e00b      	b.n	8000ee4 <HAL_RCC_OscConfig+0xd4>
 8000ecc:	4b6b      	ldr	r3, [pc, #428]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a6a      	ldr	r2, [pc, #424]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	4b68      	ldr	r3, [pc, #416]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a67      	ldr	r2, [pc, #412]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d013      	beq.n	8000f14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eec:	f7ff fbc4 	bl	8000678 <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef4:	f7ff fbc0 	bl	8000678 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b64      	cmp	r3, #100	; 0x64
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e200      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f06:	4b5d      	ldr	r3, [pc, #372]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0f0      	beq.n	8000ef4 <HAL_RCC_OscConfig+0xe4>
 8000f12:	e014      	b.n	8000f3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f14:	f7ff fbb0 	bl	8000678 <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f1c:	f7ff fbac 	bl	8000678 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b64      	cmp	r3, #100	; 0x64
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e1ec      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2e:	4b53      	ldr	r3, [pc, #332]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1f0      	bne.n	8000f1c <HAL_RCC_OscConfig+0x10c>
 8000f3a:	e000      	b.n	8000f3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d063      	beq.n	8001012 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f4a:	4b4c      	ldr	r3, [pc, #304]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 030c 	and.w	r3, r3, #12
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d00b      	beq.n	8000f6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f56:	4b49      	ldr	r3, [pc, #292]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 030c 	and.w	r3, r3, #12
 8000f5e:	2b08      	cmp	r3, #8
 8000f60:	d11c      	bne.n	8000f9c <HAL_RCC_OscConfig+0x18c>
 8000f62:	4b46      	ldr	r3, [pc, #280]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d116      	bne.n	8000f9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f6e:	4b43      	ldr	r3, [pc, #268]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d005      	beq.n	8000f86 <HAL_RCC_OscConfig+0x176>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d001      	beq.n	8000f86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e1c0      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f86:	4b3d      	ldr	r3, [pc, #244]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	4939      	ldr	r1, [pc, #228]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f96:	4313      	orrs	r3, r2
 8000f98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f9a:	e03a      	b.n	8001012 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d020      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fa4:	4b36      	ldr	r3, [pc, #216]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000faa:	f7ff fb65 	bl	8000678 <HAL_GetTick>
 8000fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb0:	e008      	b.n	8000fc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fb2:	f7ff fb61 	bl	8000678 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e1a1      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc4:	4b2d      	ldr	r3, [pc, #180]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0f0      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd0:	4b2a      	ldr	r3, [pc, #168]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	4927      	ldr	r1, [pc, #156]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	600b      	str	r3, [r1, #0]
 8000fe4:	e015      	b.n	8001012 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fe6:	4b26      	ldr	r3, [pc, #152]	; (8001080 <HAL_RCC_OscConfig+0x270>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fb44 	bl	8000678 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff4:	f7ff fb40 	bl	8000678 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e180      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001006:	4b1d      	ldr	r3, [pc, #116]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f0      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	2b00      	cmp	r3, #0
 800101c:	d03a      	beq.n	8001094 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d019      	beq.n	800105a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_RCC_OscConfig+0x274>)
 8001028:	2201      	movs	r2, #1
 800102a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800102c:	f7ff fb24 	bl	8000678 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001034:	f7ff fb20 	bl	8000678 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e160      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <HAL_RCC_OscConfig+0x26c>)
 8001048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f0      	beq.n	8001034 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001052:	2001      	movs	r0, #1
 8001054:	f000 fad8 	bl	8001608 <RCC_Delay>
 8001058:	e01c      	b.n	8001094 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_RCC_OscConfig+0x274>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001060:	f7ff fb0a 	bl	8000678 <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001066:	e00f      	b.n	8001088 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001068:	f7ff fb06 	bl	8000678 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d908      	bls.n	8001088 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e146      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000
 8001080:	42420000 	.word	0x42420000
 8001084:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001088:	4b92      	ldr	r3, [pc, #584]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1e9      	bne.n	8001068 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80a6 	beq.w	80011ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010a6:	4b8b      	ldr	r3, [pc, #556]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10d      	bne.n	80010ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	4b88      	ldr	r3, [pc, #544]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	4a87      	ldr	r2, [pc, #540]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010bc:	61d3      	str	r3, [r2, #28]
 80010be:	4b85      	ldr	r3, [pc, #532]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010ca:	2301      	movs	r3, #1
 80010cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ce:	4b82      	ldr	r3, [pc, #520]	; (80012d8 <HAL_RCC_OscConfig+0x4c8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d118      	bne.n	800110c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010da:	4b7f      	ldr	r3, [pc, #508]	; (80012d8 <HAL_RCC_OscConfig+0x4c8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a7e      	ldr	r2, [pc, #504]	; (80012d8 <HAL_RCC_OscConfig+0x4c8>)
 80010e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010e6:	f7ff fac7 	bl	8000678 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ee:	f7ff fac3 	bl	8000678 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b64      	cmp	r3, #100	; 0x64
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e103      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001100:	4b75      	ldr	r3, [pc, #468]	; (80012d8 <HAL_RCC_OscConfig+0x4c8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0f0      	beq.n	80010ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d106      	bne.n	8001122 <HAL_RCC_OscConfig+0x312>
 8001114:	4b6f      	ldr	r3, [pc, #444]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	4a6e      	ldr	r2, [pc, #440]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6213      	str	r3, [r2, #32]
 8001120:	e02d      	b.n	800117e <HAL_RCC_OscConfig+0x36e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10c      	bne.n	8001144 <HAL_RCC_OscConfig+0x334>
 800112a:	4b6a      	ldr	r3, [pc, #424]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800112c:	6a1b      	ldr	r3, [r3, #32]
 800112e:	4a69      	ldr	r2, [pc, #420]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001130:	f023 0301 	bic.w	r3, r3, #1
 8001134:	6213      	str	r3, [r2, #32]
 8001136:	4b67      	ldr	r3, [pc, #412]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	4a66      	ldr	r2, [pc, #408]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	f023 0304 	bic.w	r3, r3, #4
 8001140:	6213      	str	r3, [r2, #32]
 8001142:	e01c      	b.n	800117e <HAL_RCC_OscConfig+0x36e>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	2b05      	cmp	r3, #5
 800114a:	d10c      	bne.n	8001166 <HAL_RCC_OscConfig+0x356>
 800114c:	4b61      	ldr	r3, [pc, #388]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	4a60      	ldr	r2, [pc, #384]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	6213      	str	r3, [r2, #32]
 8001158:	4b5e      	ldr	r3, [pc, #376]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	4a5d      	ldr	r2, [pc, #372]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6213      	str	r3, [r2, #32]
 8001164:	e00b      	b.n	800117e <HAL_RCC_OscConfig+0x36e>
 8001166:	4b5b      	ldr	r3, [pc, #364]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	4a5a      	ldr	r2, [pc, #360]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800116c:	f023 0301 	bic.w	r3, r3, #1
 8001170:	6213      	str	r3, [r2, #32]
 8001172:	4b58      	ldr	r3, [pc, #352]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	4a57      	ldr	r2, [pc, #348]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001178:	f023 0304 	bic.w	r3, r3, #4
 800117c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d015      	beq.n	80011b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001186:	f7ff fa77 	bl	8000678 <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800118c:	e00a      	b.n	80011a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118e:	f7ff fa73 	bl	8000678 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	f241 3288 	movw	r2, #5000	; 0x1388
 800119c:	4293      	cmp	r3, r2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e0b1      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a4:	4b4b      	ldr	r3, [pc, #300]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0ee      	beq.n	800118e <HAL_RCC_OscConfig+0x37e>
 80011b0:	e014      	b.n	80011dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b2:	f7ff fa61 	bl	8000678 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b8:	e00a      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ba:	f7ff fa5d 	bl	8000678 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e09b      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d0:	4b40      	ldr	r3, [pc, #256]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1ee      	bne.n	80011ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011dc:	7dfb      	ldrb	r3, [r7, #23]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d105      	bne.n	80011ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011e2:	4b3c      	ldr	r3, [pc, #240]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	4a3b      	ldr	r2, [pc, #236]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 8087 	beq.w	8001306 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011f8:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 030c 	and.w	r3, r3, #12
 8001200:	2b08      	cmp	r3, #8
 8001202:	d061      	beq.n	80012c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d146      	bne.n	800129a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800120c:	4b33      	ldr	r3, [pc, #204]	; (80012dc <HAL_RCC_OscConfig+0x4cc>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001212:	f7ff fa31 	bl	8000678 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800121a:	f7ff fa2d 	bl	8000678 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e06d      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800122c:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f0      	bne.n	800121a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001240:	d108      	bne.n	8001254 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001242:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	4921      	ldr	r1, [pc, #132]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001250:	4313      	orrs	r3, r2
 8001252:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a19      	ldr	r1, [r3, #32]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	430b      	orrs	r3, r1
 8001266:	491b      	ldr	r1, [pc, #108]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	4313      	orrs	r3, r2
 800126a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <HAL_RCC_OscConfig+0x4cc>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7ff fa01 	bl	8000678 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127a:	f7ff f9fd 	bl	8000678 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e03d      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x46a>
 8001298:	e035      	b.n	8001306 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <HAL_RCC_OscConfig+0x4cc>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a0:	f7ff f9ea 	bl	8000678 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a8:	f7ff f9e6 	bl	8000678 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e026      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x498>
 80012c6:	e01e      	b.n	8001306 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d107      	bne.n	80012e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e019      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40007000 	.word	0x40007000
 80012dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_RCC_OscConfig+0x500>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d106      	bne.n	8001302 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fe:	429a      	cmp	r2, r3
 8001300:	d001      	beq.n	8001306 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021000 	.word	0x40021000

08001314 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e0d0      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001328:	4b6a      	ldr	r3, [pc, #424]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d910      	bls.n	8001358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001336:	4b67      	ldr	r3, [pc, #412]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f023 0207 	bic.w	r2, r3, #7
 800133e:	4965      	ldr	r1, [pc, #404]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001346:	4b63      	ldr	r3, [pc, #396]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	429a      	cmp	r2, r3
 8001352:	d001      	beq.n	8001358 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e0b8      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d020      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001370:	4b59      	ldr	r3, [pc, #356]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	4a58      	ldr	r2, [pc, #352]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800137a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001388:	4b53      	ldr	r3, [pc, #332]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4a52      	ldr	r2, [pc, #328]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 800138e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001392:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001394:	4b50      	ldr	r3, [pc, #320]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	494d      	ldr	r1, [pc, #308]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d040      	beq.n	8001434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d107      	bne.n	80013ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ba:	4b47      	ldr	r3, [pc, #284]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d115      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e07f      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d107      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d2:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d109      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e073      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e06b      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013f2:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f023 0203 	bic.w	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	4936      	ldr	r1, [pc, #216]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001404:	f7ff f938 	bl	8000678 <HAL_GetTick>
 8001408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800140a:	e00a      	b.n	8001422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800140c:	f7ff f934 	bl	8000678 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	f241 3288 	movw	r2, #5000	; 0x1388
 800141a:	4293      	cmp	r3, r2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e053      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001422:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 020c 	and.w	r2, r3, #12
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	429a      	cmp	r2, r3
 8001432:	d1eb      	bne.n	800140c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001434:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d210      	bcs.n	8001464 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001442:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f023 0207 	bic.w	r2, r3, #7
 800144a:	4922      	ldr	r1, [pc, #136]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	4313      	orrs	r3, r2
 8001450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001452:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	429a      	cmp	r2, r3
 800145e:	d001      	beq.n	8001464 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e032      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	4916      	ldr	r1, [pc, #88]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	4313      	orrs	r3, r2
 8001480:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d009      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	490e      	ldr	r1, [pc, #56]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014a2:	f000 f821 	bl	80014e8 <HAL_RCC_GetSysClockFreq>
 80014a6:	4602      	mov	r2, r0
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	490a      	ldr	r1, [pc, #40]	; (80014dc <HAL_RCC_ClockConfig+0x1c8>)
 80014b4:	5ccb      	ldrb	r3, [r1, r3]
 80014b6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ba:	4a09      	ldr	r2, [pc, #36]	; (80014e0 <HAL_RCC_ClockConfig+0x1cc>)
 80014bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_RCC_ClockConfig+0x1d0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f896 	bl	80005f4 <HAL_InitTick>

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40022000 	.word	0x40022000
 80014d8:	40021000 	.word	0x40021000
 80014dc:	08002a50 	.word	0x08002a50
 80014e0:	20000000 	.word	0x20000000
 80014e4:	20000004 	.word	0x20000004

080014e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e8:	b490      	push	{r4, r7}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014ee:	4b29      	ldr	r3, [pc, #164]	; (8001594 <HAL_RCC_GetSysClockFreq+0xac>)
 80014f0:	1d3c      	adds	r4, r7, #4
 80014f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014f8:	f240 2301 	movw	r3, #513	; 0x201
 80014fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001512:	4b21      	ldr	r3, [pc, #132]	; (8001598 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b04      	cmp	r3, #4
 8001520:	d002      	beq.n	8001528 <HAL_RCC_GetSysClockFreq+0x40>
 8001522:	2b08      	cmp	r3, #8
 8001524:	d003      	beq.n	800152e <HAL_RCC_GetSysClockFreq+0x46>
 8001526:	e02b      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <HAL_RCC_GetSysClockFreq+0xb4>)
 800152a:	623b      	str	r3, [r7, #32]
      break;
 800152c:	e02b      	b.n	8001586 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	0c9b      	lsrs	r3, r3, #18
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	3328      	adds	r3, #40	; 0x28
 8001538:	443b      	add	r3, r7
 800153a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800153e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d012      	beq.n	8001570 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <HAL_RCC_GetSysClockFreq+0xb0>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	0c5b      	lsrs	r3, r3, #17
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	3328      	adds	r3, #40	; 0x28
 8001556:	443b      	add	r3, r7
 8001558:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800155c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	4a0e      	ldr	r2, [pc, #56]	; (800159c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001562:	fb03 f202 	mul.w	r2, r3, r2
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	fbb2 f3f3 	udiv	r3, r2, r3
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
 800156e:	e004      	b.n	800157a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001574:	fb02 f303 	mul.w	r3, r2, r3
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	623b      	str	r3, [r7, #32]
      break;
 800157e:	e002      	b.n	8001586 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001582:	623b      	str	r3, [r7, #32]
      break;
 8001584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001586:	6a3b      	ldr	r3, [r7, #32]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3728      	adds	r7, #40	; 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bc90      	pop	{r4, r7}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	080028dc 	.word	0x080028dc
 8001598:	40021000 	.word	0x40021000
 800159c:	007a1200 	.word	0x007a1200
 80015a0:	003d0900 	.word	0x003d0900

080015a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015a8:	4b02      	ldr	r3, [pc, #8]	; (80015b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	20000000 	.word	0x20000000

080015b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015bc:	f7ff fff2 	bl	80015a4 <HAL_RCC_GetHCLKFreq>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	0a1b      	lsrs	r3, r3, #8
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	4903      	ldr	r1, [pc, #12]	; (80015dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80015ce:	5ccb      	ldrb	r3, [r1, r3]
 80015d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40021000 	.word	0x40021000
 80015dc:	08002a60 	.word	0x08002a60

080015e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015e4:	f7ff ffde 	bl	80015a4 <HAL_RCC_GetHCLKFreq>
 80015e8:	4602      	mov	r2, r0
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	0adb      	lsrs	r3, r3, #11
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	4903      	ldr	r1, [pc, #12]	; (8001604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015f6:	5ccb      	ldrb	r3, [r1, r3]
 80015f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40021000 	.word	0x40021000
 8001604:	08002a60 	.word	0x08002a60

08001608 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <RCC_Delay+0x34>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <RCC_Delay+0x38>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0a5b      	lsrs	r3, r3, #9
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	fb02 f303 	mul.w	r3, r2, r3
 8001622:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001624:	bf00      	nop
  }
  while (Delay --);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1e5a      	subs	r2, r3, #1
 800162a:	60fa      	str	r2, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f9      	bne.n	8001624 <RCC_Delay+0x1c>
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	20000000 	.word	0x20000000
 8001640:	10624dd3 	.word	0x10624dd3

08001644 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e03f      	b.n	80016d6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d106      	bne.n	8001670 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7fe fec0 	bl	80003f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2224      	movs	r2, #36	; 0x24
 8001674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001686:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 fc85 	bl	8001f98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	691a      	ldr	r2, [r3, #16]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800169c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	695a      	ldr	r2, [r3, #20]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80016ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2220      	movs	r2, #32
 80016c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2220      	movs	r2, #32
 80016d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b08a      	sub	sp, #40	; 0x28
 80016e2:	af02      	add	r7, sp, #8
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	4613      	mov	r3, r2
 80016ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b20      	cmp	r3, #32
 80016fc:	d17c      	bne.n	80017f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <HAL_UART_Transmit+0x2c>
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e075      	b.n	80017fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <HAL_UART_Transmit+0x3e>
 8001718:	2302      	movs	r3, #2
 800171a:	e06e      	b.n	80017fa <HAL_UART_Transmit+0x11c>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2221      	movs	r2, #33	; 0x21
 800172e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001732:	f7fe ffa1 	bl	8000678 <HAL_GetTick>
 8001736:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	88fa      	ldrh	r2, [r7, #6]
 800173c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	88fa      	ldrh	r2, [r7, #6]
 8001742:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800174c:	d108      	bne.n	8001760 <HAL_UART_Transmit+0x82>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d104      	bne.n	8001760 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	61bb      	str	r3, [r7, #24]
 800175e:	e003      	b.n	8001768 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001770:	e02a      	b.n	80017c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2200      	movs	r2, #0
 800177a:	2180      	movs	r1, #128	; 0x80
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f000 fa38 	bl	8001bf2 <UART_WaitOnFlagUntilTimeout>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e036      	b.n	80017fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10b      	bne.n	80017aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	3302      	adds	r3, #2
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	e007      	b.n	80017ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	781a      	ldrb	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	3301      	adds	r3, #1
 80017b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80017be:	b29b      	uxth	r3, r3
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1cf      	bne.n	8001772 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2200      	movs	r2, #0
 80017da:	2140      	movs	r1, #64	; 0x40
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 fa08 	bl	8001bf2 <UART_WaitOnFlagUntilTimeout>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e006      	b.n	80017fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2220      	movs	r2, #32
 80017f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	e000      	b.n	80017fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80017f8:	2302      	movs	r3, #2
  }
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3720      	adds	r7, #32
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	4613      	mov	r3, r2
 800180e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b20      	cmp	r3, #32
 800181a:	d11d      	bne.n	8001858 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <HAL_UART_Receive_IT+0x26>
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e016      	b.n	800185a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_UART_Receive_IT+0x38>
 8001836:	2302      	movs	r3, #2
 8001838:	e00f      	b.n	800185a <HAL_UART_Receive_IT+0x58>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	461a      	mov	r2, r3
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 fa19 	bl	8001c86 <UART_Start_Receive_IT>
 8001854:	4603      	mov	r3, r0
 8001856:	e000      	b.n	800185a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001858:	2302      	movs	r3, #2
  }
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001884:	2300      	movs	r3, #0
 8001886:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10d      	bne.n	80018b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	f003 0320 	and.w	r3, r3, #32
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d008      	beq.n	80018b6 <HAL_UART_IRQHandler+0x52>
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	f003 0320 	and.w	r3, r3, #32
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 fac9 	bl	8001e46 <UART_Receive_IT>
      return;
 80018b4:	e17b      	b.n	8001bae <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 80b1 	beq.w	8001a20 <HAL_UART_IRQHandler+0x1bc>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d105      	bne.n	80018d4 <HAL_UART_IRQHandler+0x70>
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 80a6 	beq.w	8001a20 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00a      	beq.n	80018f4 <HAL_UART_IRQHandler+0x90>
 80018de:	6a3b      	ldr	r3, [r7, #32]
 80018e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	f043 0201 	orr.w	r2, r3, #1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00a      	beq.n	8001914 <HAL_UART_IRQHandler+0xb0>
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f043 0202 	orr.w	r2, r3, #2
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00a      	beq.n	8001934 <HAL_UART_IRQHandler+0xd0>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f043 0204 	orr.w	r2, r3, #4
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00f      	beq.n	800195e <HAL_UART_IRQHandler+0xfa>
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	f003 0320 	and.w	r3, r3, #32
 8001944:	2b00      	cmp	r3, #0
 8001946:	d104      	bne.n	8001952 <HAL_UART_IRQHandler+0xee>
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d005      	beq.n	800195e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f043 0208 	orr.w	r2, r3, #8
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 811e 	beq.w	8001ba4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	f003 0320 	and.w	r3, r3, #32
 800196e:	2b00      	cmp	r3, #0
 8001970:	d007      	beq.n	8001982 <HAL_UART_IRQHandler+0x11e>
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	f003 0320 	and.w	r3, r3, #32
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 fa62 	bl	8001e46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800198c:	2b00      	cmp	r3, #0
 800198e:	bf14      	ite	ne
 8001990:	2301      	movne	r3, #1
 8001992:	2300      	moveq	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <HAL_UART_IRQHandler+0x146>
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d031      	beq.n	8001a0e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f9a4 	bl	8001cf8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d023      	beq.n	8001a06 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	695a      	ldr	r2, [r3, #20]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019cc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d013      	beq.n	80019fe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019da:	4a76      	ldr	r2, [pc, #472]	; (8001bb4 <HAL_UART_IRQHandler+0x350>)
 80019dc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe ff9a 	bl	800091c <HAL_DMA_Abort_IT>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d016      	beq.n	8001a1c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019f8:	4610      	mov	r0, r2
 80019fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019fc:	e00e      	b.n	8001a1c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f8e3 	bl	8001bca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a04:	e00a      	b.n	8001a1c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f8df 	bl	8001bca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a0c:	e006      	b.n	8001a1c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f8db 	bl	8001bca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001a1a:	e0c3      	b.n	8001ba4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a1c:	bf00      	nop
    return;
 8001a1e:	e0c1      	b.n	8001ba4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	f040 80a1 	bne.w	8001b6c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	f003 0310 	and.w	r3, r3, #16
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 809b 	beq.w	8001b6c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	f003 0310 	and.w	r3, r3, #16
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 8095 	beq.w	8001b6c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d04e      	beq.n	8001b04 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001a70:	8a3b      	ldrh	r3, [r7, #16]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 8098 	beq.w	8001ba8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001a7c:	8a3a      	ldrh	r2, [r7, #16]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	f080 8092 	bcs.w	8001ba8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	8a3a      	ldrh	r2, [r7, #16]
 8001a88:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	2b20      	cmp	r3, #32
 8001a92:	d02b      	beq.n	8001aec <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aa2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0201 	bic.w	r2, r2, #1
 8001ab2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695a      	ldr	r2, [r3, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ac2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0210 	bic.w	r2, r2, #16
 8001ae0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fedd 	bl	80008a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	4619      	mov	r1, r3
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f86d 	bl	8001bdc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001b02:	e051      	b.n	8001ba8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d047      	beq.n	8001bac <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8001b1c:	8a7b      	ldrh	r3, [r7, #18]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d044      	beq.n	8001bac <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001b30:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695a      	ldr	r2, [r3, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0201 	bic.w	r2, r2, #1
 8001b40:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2220      	movs	r2, #32
 8001b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0210 	bic.w	r2, r2, #16
 8001b5e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001b60:	8a7b      	ldrh	r3, [r7, #18]
 8001b62:	4619      	mov	r1, r3
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f839 	bl	8001bdc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001b6a:	e01f      	b.n	8001bac <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d008      	beq.n	8001b88 <HAL_UART_IRQHandler+0x324>
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f8f9 	bl	8001d78 <UART_Transmit_IT>
    return;
 8001b86:	e012      	b.n	8001bae <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00d      	beq.n	8001bae <HAL_UART_IRQHandler+0x34a>
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f93a 	bl	8001e16 <UART_EndTransmit_IT>
    return;
 8001ba2:	e004      	b.n	8001bae <HAL_UART_IRQHandler+0x34a>
    return;
 8001ba4:	bf00      	nop
 8001ba6:	e002      	b.n	8001bae <HAL_UART_IRQHandler+0x34a>
      return;
 8001ba8:	bf00      	nop
 8001baa:	e000      	b.n	8001bae <HAL_UART_IRQHandler+0x34a>
      return;
 8001bac:	bf00      	nop
  }
}
 8001bae:	3728      	adds	r7, #40	; 0x28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	08001d51 	.word	0x08001d51

08001bb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr

08001bca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c02:	e02c      	b.n	8001c5e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0a:	d028      	beq.n	8001c5e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d007      	beq.n	8001c22 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c12:	f7fe fd31 	bl	8000678 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d21d      	bcs.n	8001c5e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c30:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695a      	ldr	r2, [r3, #20]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0201 	bic.w	r2, r2, #1
 8001c40:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2220      	movs	r2, #32
 8001c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e00f      	b.n	8001c7e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4013      	ands	r3, r2
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	bf0c      	ite	eq
 8001c6e:	2301      	moveq	r3, #1
 8001c70:	2300      	movne	r3, #0
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	461a      	mov	r2, r3
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d0c3      	beq.n	8001c04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b085      	sub	sp, #20
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	4613      	mov	r3, r2
 8001c92:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	88fa      	ldrh	r2, [r7, #6]
 8001c9e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	88fa      	ldrh	r2, [r7, #6]
 8001ca4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2222      	movs	r2, #34	; 0x22
 8001cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cca:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	695a      	ldr	r2, [r3, #20]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0201 	orr.w	r2, r2, #1
 8001cda:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0220 	orr.w	r2, r2, #32
 8001cea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001d0e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0201 	bic.w	r2, r2, #1
 8001d1e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d107      	bne.n	8001d38 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0210 	bic.w	r2, r2, #16
 8001d36:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f7ff ff2d 	bl	8001bca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b21      	cmp	r3, #33	; 0x21
 8001d8a:	d13e      	bne.n	8001e0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d94:	d114      	bne.n	8001dc0 <UART_Transmit_IT+0x48>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d110      	bne.n	8001dc0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001db2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	1c9a      	adds	r2, r3, #2
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	621a      	str	r2, [r3, #32]
 8001dbe:	e008      	b.n	8001dd2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	1c59      	adds	r1, r3, #1
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6211      	str	r1, [r2, #32]
 8001dca:	781a      	ldrb	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4619      	mov	r1, r3
 8001de0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10f      	bne.n	8001e06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001df4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001e0a:	2302      	movs	r3, #2
  }
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr

08001e16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2220      	movs	r2, #32
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff febe 	bl	8001bb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b22      	cmp	r3, #34	; 0x22
 8001e58:	f040 8099 	bne.w	8001f8e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e64:	d117      	bne.n	8001e96 <UART_Receive_IT+0x50>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d113      	bne.n	8001e96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	1c9a      	adds	r2, r3, #2
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28
 8001e94:	e026      	b.n	8001ee4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea8:	d007      	beq.n	8001eba <UART_Receive_IT+0x74>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10a      	bne.n	8001ec8 <UART_Receive_IT+0x82>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d106      	bne.n	8001ec8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	701a      	strb	r2, [r3, #0]
 8001ec6:	e008      	b.n	8001eda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d148      	bne.n	8001f8a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0220 	bic.w	r2, r2, #32
 8001f06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695a      	ldr	r2, [r3, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0201 	bic.w	r2, r2, #1
 8001f26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d123      	bne.n	8001f80 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0210 	bic.w	r2, r2, #16
 8001f4c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b10      	cmp	r3, #16
 8001f5a:	d10a      	bne.n	8001f72 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f76:	4619      	mov	r1, r3
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff fe2f 	bl	8001bdc <HAL_UARTEx_RxEventCallback>
 8001f7e:	e002      	b.n	8001f86 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 fc1b 	bl	80027bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e002      	b.n	8001f90 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e000      	b.n	8001f90 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001f8e:	2302      	movs	r3, #2
  }
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001fd2:	f023 030c 	bic.w	r3, r3, #12
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	68b9      	ldr	r1, [r7, #8]
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a2c      	ldr	r2, [pc, #176]	; (80020ac <UART_SetConfig+0x114>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d103      	bne.n	8002008 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002000:	f7ff faee 	bl	80015e0 <HAL_RCC_GetPCLK2Freq>
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	e002      	b.n	800200e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002008:	f7ff fad6 	bl	80015b8 <HAL_RCC_GetPCLK1Freq>
 800200c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	009a      	lsls	r2, r3, #2
 8002018:	441a      	add	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	fbb2 f3f3 	udiv	r3, r2, r3
 8002024:	4a22      	ldr	r2, [pc, #136]	; (80020b0 <UART_SetConfig+0x118>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	0119      	lsls	r1, r3, #4
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	009a      	lsls	r2, r3, #2
 8002038:	441a      	add	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	fbb2 f2f3 	udiv	r2, r2, r3
 8002044:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <UART_SetConfig+0x118>)
 8002046:	fba3 0302 	umull	r0, r3, r3, r2
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	2064      	movs	r0, #100	; 0x64
 800204e:	fb00 f303 	mul.w	r3, r0, r3
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	3332      	adds	r3, #50	; 0x32
 8002058:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <UART_SetConfig+0x118>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002064:	4419      	add	r1, r3
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	009a      	lsls	r2, r3, #2
 8002070:	441a      	add	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	fbb2 f2f3 	udiv	r2, r2, r3
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <UART_SetConfig+0x118>)
 800207e:	fba3 0302 	umull	r0, r3, r3, r2
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	2064      	movs	r0, #100	; 0x64
 8002086:	fb00 f303 	mul.w	r3, r0, r3
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	3332      	adds	r3, #50	; 0x32
 8002090:	4a07      	ldr	r2, [pc, #28]	; (80020b0 <UART_SetConfig+0x118>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	f003 020f 	and.w	r2, r3, #15
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	440a      	add	r2, r1
 80020a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80020a4:	bf00      	nop
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40013800 	.word	0x40013800
 80020b0:	51eb851f 	.word	0x51eb851f

080020b4 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <DWT_Delay_Init+0x58>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4a13      	ldr	r2, [pc, #76]	; (800210c <DWT_Delay_Init+0x58>)
 80020be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020c2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <DWT_Delay_Init+0x58>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	4a10      	ldr	r2, [pc, #64]	; (800210c <DWT_Delay_Init+0x58>)
 80020ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ce:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80020d0:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <DWT_Delay_Init+0x5c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0e      	ldr	r2, [pc, #56]	; (8002110 <DWT_Delay_Init+0x5c>)
 80020d6:	f023 0301 	bic.w	r3, r3, #1
 80020da:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <DWT_Delay_Init+0x5c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a0b      	ldr	r2, [pc, #44]	; (8002110 <DWT_Delay_Init+0x5c>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80020e8:	4b09      	ldr	r3, [pc, #36]	; (8002110 <DWT_Delay_Init+0x5c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80020ee:	bf00      	nop
     __ASM volatile ("NOP");
 80020f0:	bf00      	nop
  __ASM volatile ("NOP");
 80020f2:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <DWT_Delay_Init+0x5c>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80020fc:	2300      	movs	r3, #0
 80020fe:	e000      	b.n	8002102 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8002100:	2301      	movs	r3, #1
  }
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000edf0 	.word	0xe000edf0
 8002110:	e0001000 	.word	0xe0001000

08002114 <getTimeElapse>:
extern UART_HandleTypeDef huart3;

static void Debug_SendStr(char *pString);
static uint32_t getTimeElapse(uint32_t timeStart);

static uint32_t getTimeElapse(uint32_t timeStart){
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	uint32_t curTime = HAL_GetTick();
 800211c:	f7fe faac 	bl	8000678 <HAL_GetTick>
 8002120:	60f8      	str	r0, [r7, #12]
	if(curTime > timeStart){
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	429a      	cmp	r2, r3
 8002128:	d905      	bls.n	8002136 <getTimeElapse+0x22>
		return (HAL_GetTick() - timeStart);
 800212a:	f7fe faa5 	bl	8000678 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	e004      	b.n	8002140 <getTimeElapse+0x2c>
	}
	return ((0xFFFFFF00 - timeStart) + curTime);
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100

}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <Debug_SendStr>:

static void Debug_SendStr(char *pString) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
    while (*pString != NULL) {
 8002150:	e008      	b.n	8002164 <Debug_SendStr+0x1c>
    	HAL_UART_Transmit(&huart2,(uint8_t*) pString, 1, 100);
 8002152:	2364      	movs	r3, #100	; 0x64
 8002154:	2201      	movs	r2, #1
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4807      	ldr	r0, [pc, #28]	; (8002178 <Debug_SendStr+0x30>)
 800215a:	f7ff fac0 	bl	80016de <HAL_UART_Transmit>
        pString++;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3301      	adds	r3, #1
 8002162:	607b      	str	r3, [r7, #4]
    while (*pString != NULL) {
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f2      	bne.n	8002152 <Debug_SendStr+0xa>
    }
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000034 	.word	0x20000034

0800217c <main_Init>:
void main_Init(void){
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8002180:	f7ff ff98 	bl	80020b4 <DWT_Delay_Init>
	pes_receive_init(&huart3);
 8002184:	4803      	ldr	r0, [pc, #12]	; (8002194 <main_Init+0x18>)
 8002186:	f000 fa4d 	bl	8002624 <pes_receive_init>
	Debug_SendStr("Main Init! \n");
 800218a:	4803      	ldr	r0, [pc, #12]	; (8002198 <main_Init+0x1c>)
 800218c:	f7ff ffdc 	bl	8002148 <Debug_SendStr>
}
 8002190:	bf00      	nop
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000078 	.word	0x20000078
 8002198:	080028ec 	.word	0x080028ec

0800219c <Debug_ButtonPrintfState>:

void Debug_ButtonPrintfState(void){
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
	if(!pesButton.Up){
 80021a0:	4b4d      	ldr	r3, [pc, #308]	; (80022d8 <Debug_ButtonPrintfState+0x13c>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d103      	bne.n	80021b6 <Debug_ButtonPrintfState+0x1a>
		Debug_SendStr("Button Up is press!\n");
 80021ae:	484b      	ldr	r0, [pc, #300]	; (80022dc <Debug_ButtonPrintfState+0x140>)
 80021b0:	f7ff ffca 	bl	8002148 <Debug_SendStr>
		Debug_SendStr("Button Tamgiac is press!\n");
	}
	else if(!pesButton.X){
		Debug_SendStr("Button X is press!\n");
	}
}
 80021b4:	e08d      	b.n	80022d2 <Debug_ButtonPrintfState+0x136>
	else if(!pesButton.Down){
 80021b6:	4b48      	ldr	r3, [pc, #288]	; (80022d8 <Debug_ButtonPrintfState+0x13c>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	f003 0320 	and.w	r3, r3, #32
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d103      	bne.n	80021cc <Debug_ButtonPrintfState+0x30>
		Debug_SendStr("Button Down is press!\n");
 80021c4:	4846      	ldr	r0, [pc, #280]	; (80022e0 <Debug_ButtonPrintfState+0x144>)
 80021c6:	f7ff ffbf 	bl	8002148 <Debug_SendStr>
}
 80021ca:	e082      	b.n	80022d2 <Debug_ButtonPrintfState+0x136>
	else if(!pesButton.Right){
 80021cc:	4b42      	ldr	r3, [pc, #264]	; (80022d8 <Debug_ButtonPrintfState+0x13c>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d103      	bne.n	80021e2 <Debug_ButtonPrintfState+0x46>
		Debug_SendStr("Button Right is press!\n");
 80021da:	4842      	ldr	r0, [pc, #264]	; (80022e4 <Debug_ButtonPrintfState+0x148>)
 80021dc:	f7ff ffb4 	bl	8002148 <Debug_SendStr>
}
 80021e0:	e077      	b.n	80022d2 <Debug_ButtonPrintfState+0x136>
	else if(!pesButton.Left){
 80021e2:	4b3d      	ldr	r3, [pc, #244]	; (80022d8 <Debug_ButtonPrintfState+0x13c>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d103      	bne.n	80021f8 <Debug_ButtonPrintfState+0x5c>
		Debug_SendStr("Button Left is press!\n");
 80021f0:	483d      	ldr	r0, [pc, #244]	; (80022e8 <Debug_ButtonPrintfState+0x14c>)
 80021f2:	f7ff ffa9 	bl	8002148 <Debug_SendStr>
}
 80021f6:	e06c      	b.n	80022d2 <Debug_ButtonPrintfState+0x136>
	else if(!pesButton.L1){
 80021f8:	4b37      	ldr	r3, [pc, #220]	; (80022d8 <Debug_ButtonPrintfState+0x13c>)
 80021fa:	785b      	ldrb	r3, [r3, #1]
 80021fc:	f003 0320 	and.w	r3, r3, #32
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d103      	bne.n	800220e <Debug_ButtonPrintfState+0x72>
		Debug_SendStr("Button L1 is press!\n");
 8002206:	4839      	ldr	r0, [pc, #228]	; (80022ec <Debug_ButtonPrintfState+0x150>)
 8002208:	f7ff ff9e 	bl	8002148 <Debug_SendStr>
}
 800220c:	e061      	b.n	80022d2 <Debug_ButtonPrintfState+0x136>
	else if(!pesButton.L2){
 800220e:	4b32      	ldr	r3, [pc, #200]	; (80022d8 <Debug_ButtonPrintfState+0x13c>)
 8002210:	785b      	ldrb	r3, [r3, #1]
 8002212:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d103      	bne.n	8002224 <Debug_ButtonPrintfState+0x88>
		Debug_SendStr("Button L2 is press!\n");
 800221c:	4834      	ldr	r0, [pc, #208]	; (80022f0 <Debug_ButtonPrintfState+0x154>)
 800221e:	f7ff ff93 	bl	8002148 <Debug_SendStr>
}
 8002222:	e056      	b.n	80022d2 <Debug_ButtonPrintfState+0x136>
	else if(!pesButton.R1){
 8002224:	4b2c      	ldr	r3, [pc, #176]	; (80022d8 <Debug_ButtonPrintfState+0x13c>)
 8002226:	785b      	ldrb	r3, [r3, #1]
 8002228:	f003 0310 	and.w	r3, r3, #16
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d103      	bne.n	800223a <Debug_ButtonPrintfState+0x9e>
		Debug_SendStr("Button R1 is press!\n");
 8002232:	4830      	ldr	r0, [pc, #192]	; (80022f4 <Debug_ButtonPrintfState+0x158>)
 8002234:	f7ff ff88 	bl	8002148 <Debug_SendStr>
}
 8002238:	e04b      	b.n	80022d2 <Debug_ButtonPrintfState+0x136>
	else if(!pesButton.R2){
 800223a:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <Debug_ButtonPrintfState+0x13c>)
 800223c:	785b      	ldrb	r3, [r3, #1]
 800223e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d103      	bne.n	8002250 <Debug_ButtonPrintfState+0xb4>
		Debug_SendStr("Button R2 is press!\n");
 8002248:	482b      	ldr	r0, [pc, #172]	; (80022f8 <Debug_ButtonPrintfState+0x15c>)
 800224a:	f7ff ff7d 	bl	8002148 <Debug_SendStr>
}
 800224e:	e040      	b.n	80022d2 <Debug_ButtonPrintfState+0x136>
	else if(!pesButton.Select){
 8002250:	4b21      	ldr	r3, [pc, #132]	; (80022d8 <Debug_ButtonPrintfState+0x13c>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d103      	bne.n	8002266 <Debug_ButtonPrintfState+0xca>
		Debug_SendStr("Button Select is press!\n");
 800225e:	4827      	ldr	r0, [pc, #156]	; (80022fc <Debug_ButtonPrintfState+0x160>)
 8002260:	f7ff ff72 	bl	8002148 <Debug_SendStr>
}
 8002264:	e035      	b.n	80022d2 <Debug_ButtonPrintfState+0x136>
	else if(!pesButton.Start){
 8002266:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <Debug_ButtonPrintfState+0x13c>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d103      	bne.n	800227c <Debug_ButtonPrintfState+0xe0>
		Debug_SendStr("Button Start is press!\n");
 8002274:	4822      	ldr	r0, [pc, #136]	; (8002300 <Debug_ButtonPrintfState+0x164>)
 8002276:	f7ff ff67 	bl	8002148 <Debug_SendStr>
}
 800227a:	e02a      	b.n	80022d2 <Debug_ButtonPrintfState+0x136>
	else if(!pesButton.Tron){
 800227c:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <Debug_ButtonPrintfState+0x13c>)
 800227e:	785b      	ldrb	r3, [r3, #1]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d103      	bne.n	8002292 <Debug_ButtonPrintfState+0xf6>
		Debug_SendStr("Button Tron is press!\n");
 800228a:	481e      	ldr	r0, [pc, #120]	; (8002304 <Debug_ButtonPrintfState+0x168>)
 800228c:	f7ff ff5c 	bl	8002148 <Debug_SendStr>
}
 8002290:	e01f      	b.n	80022d2 <Debug_ButtonPrintfState+0x136>
	else if(!pesButton.Vuong){
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <Debug_ButtonPrintfState+0x13c>)
 8002294:	785b      	ldrb	r3, [r3, #1]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d103      	bne.n	80022a8 <Debug_ButtonPrintfState+0x10c>
		Debug_SendStr("Button Vuong is press!\n");
 80022a0:	4819      	ldr	r0, [pc, #100]	; (8002308 <Debug_ButtonPrintfState+0x16c>)
 80022a2:	f7ff ff51 	bl	8002148 <Debug_SendStr>
}
 80022a6:	e014      	b.n	80022d2 <Debug_ButtonPrintfState+0x136>
	else if(!pesButton.Tamgiac){
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <Debug_ButtonPrintfState+0x13c>)
 80022aa:	785b      	ldrb	r3, [r3, #1]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d103      	bne.n	80022be <Debug_ButtonPrintfState+0x122>
		Debug_SendStr("Button Tamgiac is press!\n");
 80022b6:	4815      	ldr	r0, [pc, #84]	; (800230c <Debug_ButtonPrintfState+0x170>)
 80022b8:	f7ff ff46 	bl	8002148 <Debug_SendStr>
}
 80022bc:	e009      	b.n	80022d2 <Debug_ButtonPrintfState+0x136>
	else if(!pesButton.X){
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <Debug_ButtonPrintfState+0x13c>)
 80022c0:	785b      	ldrb	r3, [r3, #1]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d102      	bne.n	80022d2 <Debug_ButtonPrintfState+0x136>
		Debug_SendStr("Button X is press!\n");
 80022cc:	4810      	ldr	r0, [pc, #64]	; (8002310 <Debug_ButtonPrintfState+0x174>)
 80022ce:	f7ff ff3b 	bl	8002148 <Debug_SendStr>
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200000c4 	.word	0x200000c4
 80022dc:	080028fc 	.word	0x080028fc
 80022e0:	08002914 	.word	0x08002914
 80022e4:	0800292c 	.word	0x0800292c
 80022e8:	08002944 	.word	0x08002944
 80022ec:	0800295c 	.word	0x0800295c
 80022f0:	08002974 	.word	0x08002974
 80022f4:	0800298c 	.word	0x0800298c
 80022f8:	080029a4 	.word	0x080029a4
 80022fc:	080029bc 	.word	0x080029bc
 8002300:	080029d8 	.word	0x080029d8
 8002304:	080029f0 	.word	0x080029f0
 8002308:	08002a08 	.word	0x08002a08
 800230c:	08002a20 	.word	0x08002a20
 8002310:	08002a3c 	.word	0x08002a3c

08002314 <main_process>:

void main_process(void){
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
	static uint32_t ticks = 0;
	uint8_t PES[6] = {0, };
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	2300      	movs	r3, #0
 8002320:	81bb      	strh	r3, [r7, #12]
	uint8_t analogValue = 0xFF;
 8002322:	23ff      	movs	r3, #255	; 0xff
 8002324:	73fb      	strb	r3, [r7, #15]
	uint8_t payload[SIZE_OF_PAYLOAD] = {0, };
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]

	if(getTimeElapse(ticks) >= TIME_POLL_PES){
 800232a:	4b17      	ldr	r3, [pc, #92]	; (8002388 <main_process+0x74>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff fef0 	bl	8002114 <getTimeElapse>
 8002334:	4603      	mov	r3, r0
 8002336:	2b13      	cmp	r3, #19
 8002338:	d91e      	bls.n	8002378 <main_process+0x64>
		getPesRawData(PES);
 800233a:	f107 0308 	add.w	r3, r7, #8
 800233e:	4618      	mov	r0, r3
 8002340:	f000 f89c 	bl	800247c <getPesRawData>

		analogValue = getPesAnalog(PES);
 8002344:	f107 0308 	add.w	r3, r7, #8
 8002348:	4618      	mov	r0, r3
 800234a:	f000 f8ff 	bl	800254c <getPesAnalog>
 800234e:	4603      	mov	r3, r0
 8002350:	73fb      	strb	r3, [r7, #15]

		payload[0] = 'F';			/* Header bytee */
 8002352:	2346      	movs	r3, #70	; 0x46
 8002354:	713b      	strb	r3, [r7, #4]
		payload[1] = PES[0];		/* Low byte digital data */
 8002356:	7a3b      	ldrb	r3, [r7, #8]
 8002358:	717b      	strb	r3, [r7, #5]
		payload[2] = PES[1];		/* High byte digital data */
 800235a:	7a7b      	ldrb	r3, [r7, #9]
 800235c:	71bb      	strb	r3, [r7, #6]
		payload[3] = analogValue;	/* Analog data */
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	71fb      	strb	r3, [r7, #7]

		HAL_UART_Transmit(&huart3, payload, SIZE_OF_PAYLOAD, 200);
 8002362:	1d39      	adds	r1, r7, #4
 8002364:	23c8      	movs	r3, #200	; 0xc8
 8002366:	2204      	movs	r2, #4
 8002368:	4808      	ldr	r0, [pc, #32]	; (800238c <main_process+0x78>)
 800236a:	f7ff f9b8 	bl	80016de <HAL_UART_Transmit>
		ticks = HAL_GetTick();
 800236e:	f7fe f983 	bl	8000678 <HAL_GetTick>
 8002372:	4603      	mov	r3, r0
 8002374:	4a04      	ldr	r2, [pc, #16]	; (8002388 <main_process+0x74>)
 8002376:	6013      	str	r3, [r2, #0]
	}

	decodePES();
 8002378:	f000 f96a 	bl	8002650 <decodePES>
	Debug_ButtonPrintfState();
 800237c:	f7ff ff0e 	bl	800219c <Debug_ButtonPrintfState>
}
 8002380:	bf00      	nop
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	200000c0 	.word	0x200000c0
 800238c:	20000078 	.word	0x20000078

08002390 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002398:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <DWT_Delay_us+0x40>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800239e:	f7ff f901 	bl	80015a4 <HAL_RCC_GetHCLKFreq>
 80023a2:	4603      	mov	r3, r0
 80023a4:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <DWT_Delay_us+0x44>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	0c9b      	lsrs	r3, r3, #18
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	fb02 f303 	mul.w	r3, r2, r3
 80023b2:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80023b4:	bf00      	nop
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <DWT_Delay_us+0x40>)
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad2      	subs	r2, r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d3f8      	bcc.n	80023b6 <DWT_Delay_us+0x26>
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	e0001000 	.word	0xe0001000
 80023d4:	431bde83 	.word	0x431bde83

080023d8 <access>:
unsigned char PS2_CONFIGMODE[5] = {0x01, 0x43, 0x00, 0x01, 0x00};
unsigned char PS2_ANALOGMODE[9] = {0x01, 0x44, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00};
pes_button_t pesButton;


unsigned char access(unsigned int tbyte){
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
	unsigned char rbyte = 0, tempp = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	75fb      	strb	r3, [r7, #23]
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]
	unsigned int j;
	HAL_GPIO_WritePin(PES_CLK_GPIO_Port, PES_CLK_Pin, GPIO_PIN_SET);
 80023e8:	2201      	movs	r2, #1
 80023ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023ee:	4822      	ldr	r0, [pc, #136]	; (8002478 <access+0xa0>)
 80023f0:	f7fe fca5 	bl	8000d3e <HAL_GPIO_WritePin>
	for(j=0; j<8; j++)
 80023f4:	2300      	movs	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	e033      	b.n	8002462 <access+0x8a>
	{
		HAL_GPIO_WritePin(PES_CMD_GPIO_Port, PES_CMD_Pin, tbyte&0x01);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	b2db      	uxtb	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800240a:	481b      	ldr	r0, [pc, #108]	; (8002478 <access+0xa0>)
 800240c:	f7fe fc97 	bl	8000d3e <HAL_GPIO_WritePin>
		DWT_Delay_us(10);
 8002410:	200a      	movs	r0, #10
 8002412:	f7ff ffbd 	bl	8002390 <DWT_Delay_us>
		HAL_GPIO_WritePin(PES_CLK_GPIO_Port, PES_CLK_Pin, GPIO_PIN_RESET);
 8002416:	2200      	movs	r2, #0
 8002418:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800241c:	4816      	ldr	r0, [pc, #88]	; (8002478 <access+0xa0>)
 800241e:	f7fe fc8e 	bl	8000d3e <HAL_GPIO_WritePin>
		DWT_Delay_us(10);
 8002422:	200a      	movs	r0, #10
 8002424:	f7ff ffb4 	bl	8002390 <DWT_Delay_us>
		tempp=HAL_GPIO_ReadPin(PES_DATA_GPIO_Port, PES_DATA_Pin);
 8002428:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800242c:	4812      	ldr	r0, [pc, #72]	; (8002478 <access+0xa0>)
 800242e:	f7fe fc6f 	bl	8000d10 <HAL_GPIO_ReadPin>
 8002432:	4603      	mov	r3, r0
 8002434:	73fb      	strb	r3, [r7, #15]
		rbyte = (rbyte >> 1) | (tempp << 7);
 8002436:	7dfb      	ldrb	r3, [r7, #23]
 8002438:	085b      	lsrs	r3, r3, #1
 800243a:	b2db      	uxtb	r3, r3
 800243c:	b25a      	sxtb	r2, r3
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	01db      	lsls	r3, r3, #7
 8002442:	b25b      	sxtb	r3, r3
 8002444:	4313      	orrs	r3, r2
 8002446:	b25b      	sxtb	r3, r3
 8002448:	75fb      	strb	r3, [r7, #23]
		HAL_GPIO_WritePin(PES_CLK_GPIO_Port, PES_CLK_Pin, GPIO_PIN_SET);
 800244a:	2201      	movs	r2, #1
 800244c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002450:	4809      	ldr	r0, [pc, #36]	; (8002478 <access+0xa0>)
 8002452:	f7fe fc74 	bl	8000d3e <HAL_GPIO_WritePin>
		tbyte = tbyte >> 1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	085b      	lsrs	r3, r3, #1
 800245a:	607b      	str	r3, [r7, #4]
	for(j=0; j<8; j++)
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	3301      	adds	r3, #1
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b07      	cmp	r3, #7
 8002466:	d9c8      	bls.n	80023fa <access+0x22>
	}
	DWT_Delay_us(20);
 8002468:	2014      	movs	r0, #20
 800246a:	f7ff ff91 	bl	8002390 <DWT_Delay_us>
	return rbyte;
 800246e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40010c00 	.word	0x40010c00

0800247c <getPesRawData>:

void getPesRawData(uint8_t *pData){
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	uint8_t analog = 128;
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(PES_ATT_GPIO_Port,PES_ATT_Pin,GPIO_PIN_RESET);
 8002488:	2200      	movs	r2, #0
 800248a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800248e:	482e      	ldr	r0, [pc, #184]	; (8002548 <getPesRawData+0xcc>)
 8002490:	f7fe fc55 	bl	8000d3e <HAL_GPIO_WritePin>
	access(0x01);
 8002494:	2001      	movs	r0, #1
 8002496:	f7ff ff9f 	bl	80023d8 <access>
	analog = access(0x42);
 800249a:	2042      	movs	r0, #66	; 0x42
 800249c:	f7ff ff9c 	bl	80023d8 <access>
 80024a0:	4603      	mov	r3, r0
 80024a2:	73fb      	strb	r3, [r7, #15]
	access(0);
 80024a4:	2000      	movs	r0, #0
 80024a6:	f7ff ff97 	bl	80023d8 <access>
	pData[0] = access(0);
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7ff ff94 	bl	80023d8 <access>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461a      	mov	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	701a      	strb	r2, [r3, #0]
	pData[1] = access(0);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	1c5c      	adds	r4, r3, #1
 80024bc:	2000      	movs	r0, #0
 80024be:	f7ff ff8b 	bl	80023d8 <access>
 80024c2:	4603      	mov	r3, r0
 80024c4:	7023      	strb	r3, [r4, #0]
	if(analog == 0x73 || analog == 0x23 || analog == 0x53)
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	2b73      	cmp	r3, #115	; 0x73
 80024ca:	d005      	beq.n	80024d8 <getPesRawData+0x5c>
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	2b23      	cmp	r3, #35	; 0x23
 80024d0:	d002      	beq.n	80024d8 <getPesRawData+0x5c>
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	2b53      	cmp	r3, #83	; 0x53
 80024d6:	d11b      	bne.n	8002510 <getPesRawData+0x94>
	{
		pData[2] = access(0);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	1c9c      	adds	r4, r3, #2
 80024dc:	2000      	movs	r0, #0
 80024de:	f7ff ff7b 	bl	80023d8 <access>
 80024e2:	4603      	mov	r3, r0
 80024e4:	7023      	strb	r3, [r4, #0]
		pData[3] = access(0);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	1cdc      	adds	r4, r3, #3
 80024ea:	2000      	movs	r0, #0
 80024ec:	f7ff ff74 	bl	80023d8 <access>
 80024f0:	4603      	mov	r3, r0
 80024f2:	7023      	strb	r3, [r4, #0]
		pData[4] = access(0);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	1d1c      	adds	r4, r3, #4
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7ff ff6d 	bl	80023d8 <access>
 80024fe:	4603      	mov	r3, r0
 8002500:	7023      	strb	r3, [r4, #0]
		pData[5] = access(0);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	1d5c      	adds	r4, r3, #5
 8002506:	2000      	movs	r0, #0
 8002508:	f7ff ff66 	bl	80023d8 <access>
 800250c:	4603      	mov	r3, r0
 800250e:	7023      	strb	r3, [r4, #0]
	}
	if(analog == 0x12)
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	2b12      	cmp	r3, #18
 8002514:	d10d      	bne.n	8002532 <getPesRawData+0xb6>
	{
		pData[2] = access(0);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	1c9c      	adds	r4, r3, #2
 800251a:	2000      	movs	r0, #0
 800251c:	f7ff ff5c 	bl	80023d8 <access>
 8002520:	4603      	mov	r3, r0
 8002522:	7023      	strb	r3, [r4, #0]
		pData[3] = access(0);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	1cdc      	adds	r4, r3, #3
 8002528:	2000      	movs	r0, #0
 800252a:	f7ff ff55 	bl	80023d8 <access>
 800252e:	4603      	mov	r3, r0
 8002530:	7023      	strb	r3, [r4, #0]
	}
	HAL_GPIO_WritePin(PES_ATT_GPIO_Port,PES_ATT_Pin,GPIO_PIN_SET);
 8002532:	2201      	movs	r2, #1
 8002534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002538:	4803      	ldr	r0, [pc, #12]	; (8002548 <getPesRawData+0xcc>)
 800253a:	f7fe fc00 	bl	8000d3e <HAL_GPIO_WritePin>
}
 800253e:	bf00      	nop
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	bd90      	pop	{r4, r7, pc}
 8002546:	bf00      	nop
 8002548:	40010c00 	.word	0x40010c00

0800254c <getPesAnalog>:
	DWT_Delay_us(10);
	send_ps2(PS2_ANALOGMODE, 9);
	DWT_Delay_us(10);
}

uint8_t getPesAnalog(uint8_t *pesRawData){
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
	uint8_t analog;

    analog = 0xff;
 8002554:	23ff      	movs	r3, #255	; 0xff
 8002556:	73fb      	strb	r3, [r7, #15]
    if(pesRawData[5] > 230)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3305      	adds	r3, #5
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2be6      	cmp	r3, #230	; 0xe6
 8002560:	d904      	bls.n	800256c <getPesAnalog+0x20>
		analog = analog & 0xfe;
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	f023 0301 	bic.w	r3, r3, #1
 8002568:	73fb      	strb	r3, [r7, #15]
 800256a:	e00d      	b.n	8002588 <getPesAnalog+0x3c>
	else if(pesRawData[5] < 20)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3305      	adds	r3, #5
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b13      	cmp	r3, #19
 8002574:	d804      	bhi.n	8002580 <getPesAnalog+0x34>
		analog = analog & 0xfd;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	f023 0302 	bic.w	r3, r3, #2
 800257c:	73fb      	strb	r3, [r7, #15]
 800257e:	e003      	b.n	8002588 <getPesAnalog+0x3c>
	else
		analog = analog | 0x03;
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	f043 0303 	orr.w	r3, r3, #3
 8002586:	73fb      	strb	r3, [r7, #15]

	if(pesRawData[4] > 230)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3304      	adds	r3, #4
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2be6      	cmp	r3, #230	; 0xe6
 8002590:	d904      	bls.n	800259c <getPesAnalog+0x50>
		analog = analog & 0xfb;
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	f023 0304 	bic.w	r3, r3, #4
 8002598:	73fb      	strb	r3, [r7, #15]
 800259a:	e00d      	b.n	80025b8 <getPesAnalog+0x6c>
	else if(pesRawData[4] < 20)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3304      	adds	r3, #4
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b13      	cmp	r3, #19
 80025a4:	d804      	bhi.n	80025b0 <getPesAnalog+0x64>
		analog = analog & 0xf7;
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	f023 0308 	bic.w	r3, r3, #8
 80025ac:	73fb      	strb	r3, [r7, #15]
 80025ae:	e003      	b.n	80025b8 <getPesAnalog+0x6c>
	else
        analog = analog | 0x0c;
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	f043 030c 	orr.w	r3, r3, #12
 80025b6:	73fb      	strb	r3, [r7, #15]

	if(pesRawData[3] > 230)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3303      	adds	r3, #3
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2be6      	cmp	r3, #230	; 0xe6
 80025c0:	d904      	bls.n	80025cc <getPesAnalog+0x80>
		analog = analog & 0xef;
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	f023 0310 	bic.w	r3, r3, #16
 80025c8:	73fb      	strb	r3, [r7, #15]
 80025ca:	e00d      	b.n	80025e8 <getPesAnalog+0x9c>
	else if(pesRawData[3] < 20)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3303      	adds	r3, #3
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b13      	cmp	r3, #19
 80025d4:	d804      	bhi.n	80025e0 <getPesAnalog+0x94>
		analog = analog & 0xdf;
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	f023 0320 	bic.w	r3, r3, #32
 80025dc:	73fb      	strb	r3, [r7, #15]
 80025de:	e003      	b.n	80025e8 <getPesAnalog+0x9c>
	else
		analog = analog | 0x30;
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80025e6:	73fb      	strb	r3, [r7, #15]

	if(pesRawData[2] > 230)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3302      	adds	r3, #2
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2be6      	cmp	r3, #230	; 0xe6
 80025f0:	d904      	bls.n	80025fc <getPesAnalog+0xb0>
		analog = analog & 0xbf;
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025f8:	73fb      	strb	r3, [r7, #15]
 80025fa:	e00d      	b.n	8002618 <getPesAnalog+0xcc>
	else if(pesRawData[2] < 20)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3302      	adds	r3, #2
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b13      	cmp	r3, #19
 8002604:	d804      	bhi.n	8002610 <getPesAnalog+0xc4>
		analog=analog & 0x7f;
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800260c:	73fb      	strb	r3, [r7, #15]
 800260e:	e003      	b.n	8002618 <getPesAnalog+0xcc>
	else
		analog=analog | 0xc0;
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002616:	73fb      	strb	r3, [r7, #15]
	return analog;
 8002618:	7bfb      	ldrb	r3, [r7, #15]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <pes_receive_init>:

UART_HandleTypeDef* UartReceive;
uint8_t u8_pesData;
uint16_t pesDigitalRawData = 0xFFFF;

void pes_receive_init(UART_HandleTypeDef* pUart){
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	UartReceive = pUart;
 800262c:	4a06      	ldr	r2, [pc, #24]	; (8002648 <pes_receive_init+0x24>)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(UartReceive, &u8_pesData, 1);
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <pes_receive_init+0x24>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2201      	movs	r2, #1
 8002638:	4904      	ldr	r1, [pc, #16]	; (800264c <pes_receive_init+0x28>)
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff f8e1 	bl	8001802 <HAL_UART_Receive_IT>
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	200000c8 	.word	0x200000c8
 800264c:	200000cc 	.word	0x200000cc

08002650 <decodePES>:

void decodePES(void){
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
	uint8_t pesData[2];

	pesData[0] = pesDigitalRawData & 0xFF;
 8002656:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <decodePES+0x164>)
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	713b      	strb	r3, [r7, #4]
	pesData[1] = (pesDigitalRawData >> 8) & 0xFF;
 800265e:	4b55      	ldr	r3, [pc, #340]	; (80027b4 <decodePES+0x164>)
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	b29b      	uxth	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	717b      	strb	r3, [r7, #5]

	pesButton.Select 	= (pesData[0] & 0x01);
 800266a:	793b      	ldrb	r3, [r7, #4]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	b2d9      	uxtb	r1, r3
 8002672:	4a51      	ldr	r2, [pc, #324]	; (80027b8 <decodePES+0x168>)
 8002674:	7813      	ldrb	r3, [r2, #0]
 8002676:	f361 0300 	bfi	r3, r1, #0, #1
 800267a:	7013      	strb	r3, [r2, #0]
	pesButton.L 		= (pesData[0] & 0x02) >> 1;
 800267c:	793b      	ldrb	r3, [r7, #4]
 800267e:	105b      	asrs	r3, r3, #1
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	b2d9      	uxtb	r1, r3
 8002686:	4a4c      	ldr	r2, [pc, #304]	; (80027b8 <decodePES+0x168>)
 8002688:	7813      	ldrb	r3, [r2, #0]
 800268a:	f361 0341 	bfi	r3, r1, #1, #1
 800268e:	7013      	strb	r3, [r2, #0]
	pesButton.R 		= (pesData[0] & 0x04) >> 2;
 8002690:	793b      	ldrb	r3, [r7, #4]
 8002692:	109b      	asrs	r3, r3, #2
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	b2d9      	uxtb	r1, r3
 800269a:	4a47      	ldr	r2, [pc, #284]	; (80027b8 <decodePES+0x168>)
 800269c:	7813      	ldrb	r3, [r2, #0]
 800269e:	f361 0382 	bfi	r3, r1, #2, #1
 80026a2:	7013      	strb	r3, [r2, #0]
	pesButton.Start 	= (pesData[0] & 0x08) >> 3;
 80026a4:	793b      	ldrb	r3, [r7, #4]
 80026a6:	10db      	asrs	r3, r3, #3
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	b2d9      	uxtb	r1, r3
 80026ae:	4a42      	ldr	r2, [pc, #264]	; (80027b8 <decodePES+0x168>)
 80026b0:	7813      	ldrb	r3, [r2, #0]
 80026b2:	f361 03c3 	bfi	r3, r1, #3, #1
 80026b6:	7013      	strb	r3, [r2, #0]

	pesButton.Up 		= (pesData[0] & 0x10) >> 4;
 80026b8:	793b      	ldrb	r3, [r7, #4]
 80026ba:	111b      	asrs	r3, r3, #4
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	b2d9      	uxtb	r1, r3
 80026c2:	4a3d      	ldr	r2, [pc, #244]	; (80027b8 <decodePES+0x168>)
 80026c4:	7813      	ldrb	r3, [r2, #0]
 80026c6:	f361 1304 	bfi	r3, r1, #4, #1
 80026ca:	7013      	strb	r3, [r2, #0]
	pesButton.Right 	= (pesData[0] & 0x20) >> 5;
 80026cc:	793b      	ldrb	r3, [r7, #4]
 80026ce:	115b      	asrs	r3, r3, #5
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	b2d9      	uxtb	r1, r3
 80026d6:	4a38      	ldr	r2, [pc, #224]	; (80027b8 <decodePES+0x168>)
 80026d8:	7813      	ldrb	r3, [r2, #0]
 80026da:	f361 1386 	bfi	r3, r1, #6, #1
 80026de:	7013      	strb	r3, [r2, #0]
	pesButton.Down 		= (pesData[0] & 0x40) >> 6;
 80026e0:	793b      	ldrb	r3, [r7, #4]
 80026e2:	119b      	asrs	r3, r3, #6
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	b2d9      	uxtb	r1, r3
 80026ea:	4a33      	ldr	r2, [pc, #204]	; (80027b8 <decodePES+0x168>)
 80026ec:	7813      	ldrb	r3, [r2, #0]
 80026ee:	f361 1345 	bfi	r3, r1, #5, #1
 80026f2:	7013      	strb	r3, [r2, #0]
	pesButton.Left 		= (pesData[0] & 0x80) >> 7;
 80026f4:	793b      	ldrb	r3, [r7, #4]
 80026f6:	09db      	lsrs	r3, r3, #7
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	b2d9      	uxtb	r1, r3
 8002700:	4a2d      	ldr	r2, [pc, #180]	; (80027b8 <decodePES+0x168>)
 8002702:	7813      	ldrb	r3, [r2, #0]
 8002704:	f361 13c7 	bfi	r3, r1, #7, #1
 8002708:	7013      	strb	r3, [r2, #0]

	pesButton.L2 		= (pesData[1] & 0x01);
 800270a:	797b      	ldrb	r3, [r7, #5]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	b2d9      	uxtb	r1, r3
 8002712:	4a29      	ldr	r2, [pc, #164]	; (80027b8 <decodePES+0x168>)
 8002714:	7853      	ldrb	r3, [r2, #1]
 8002716:	f361 13c7 	bfi	r3, r1, #7, #1
 800271a:	7053      	strb	r3, [r2, #1]
	pesButton.R2 		= (pesData[1] & 0x02) >> 1;
 800271c:	797b      	ldrb	r3, [r7, #5]
 800271e:	105b      	asrs	r3, r3, #1
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	b2d9      	uxtb	r1, r3
 8002726:	4a24      	ldr	r2, [pc, #144]	; (80027b8 <decodePES+0x168>)
 8002728:	7853      	ldrb	r3, [r2, #1]
 800272a:	f361 1386 	bfi	r3, r1, #6, #1
 800272e:	7053      	strb	r3, [r2, #1]
	pesButton.L1 		= (pesData[1] & 0x04) >> 2;
 8002730:	797b      	ldrb	r3, [r7, #5]
 8002732:	109b      	asrs	r3, r3, #2
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	b2d9      	uxtb	r1, r3
 800273a:	4a1f      	ldr	r2, [pc, #124]	; (80027b8 <decodePES+0x168>)
 800273c:	7853      	ldrb	r3, [r2, #1]
 800273e:	f361 1345 	bfi	r3, r1, #5, #1
 8002742:	7053      	strb	r3, [r2, #1]
	pesButton.R1 		= (pesData[1] & 0x08) >> 3;
 8002744:	797b      	ldrb	r3, [r7, #5]
 8002746:	10db      	asrs	r3, r3, #3
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	b2d9      	uxtb	r1, r3
 800274e:	4a1a      	ldr	r2, [pc, #104]	; (80027b8 <decodePES+0x168>)
 8002750:	7853      	ldrb	r3, [r2, #1]
 8002752:	f361 1304 	bfi	r3, r1, #4, #1
 8002756:	7053      	strb	r3, [r2, #1]

	pesButton.Tamgiac 	= (pesData[1] & 0x10) >> 4;
 8002758:	797b      	ldrb	r3, [r7, #5]
 800275a:	111b      	asrs	r3, r3, #4
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	b2d9      	uxtb	r1, r3
 8002762:	4a15      	ldr	r2, [pc, #84]	; (80027b8 <decodePES+0x168>)
 8002764:	7853      	ldrb	r3, [r2, #1]
 8002766:	f361 0300 	bfi	r3, r1, #0, #1
 800276a:	7053      	strb	r3, [r2, #1]
	pesButton.Tron 		= (pesData[1] & 0x20) >> 5;
 800276c:	797b      	ldrb	r3, [r7, #5]
 800276e:	115b      	asrs	r3, r3, #5
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	b2d9      	uxtb	r1, r3
 8002776:	4a10      	ldr	r2, [pc, #64]	; (80027b8 <decodePES+0x168>)
 8002778:	7853      	ldrb	r3, [r2, #1]
 800277a:	f361 0341 	bfi	r3, r1, #1, #1
 800277e:	7053      	strb	r3, [r2, #1]
	pesButton.X 		= (pesData[1] & 0x40) >> 6;
 8002780:	797b      	ldrb	r3, [r7, #5]
 8002782:	119b      	asrs	r3, r3, #6
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	b2d9      	uxtb	r1, r3
 800278a:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <decodePES+0x168>)
 800278c:	7853      	ldrb	r3, [r2, #1]
 800278e:	f361 03c3 	bfi	r3, r1, #3, #1
 8002792:	7053      	strb	r3, [r2, #1]
	pesButton.Vuong 	= (pesData[1] & 0x80) >> 7;
 8002794:	797b      	ldrb	r3, [r7, #5]
 8002796:	09db      	lsrs	r3, r3, #7
 8002798:	b2db      	uxtb	r3, r3
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	b2d9      	uxtb	r1, r3
 80027a0:	4a05      	ldr	r2, [pc, #20]	; (80027b8 <decodePES+0x168>)
 80027a2:	7853      	ldrb	r3, [r2, #1]
 80027a4:	f361 0382 	bfi	r3, r1, #2, #1
 80027a8:	7053      	strb	r3, [r2, #1]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	2000000a 	.word	0x2000000a
 80027b8:	200000c4 	.word	0x200000c4

080027bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]

	static uint8_t byHeadIsTrue = 0;
	static uint8_t i_pes = 0;
	static uint8_t pesBuff[3];

	if(huart->Instance == UartReceive->Instance){
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b22      	ldr	r3, [pc, #136]	; (8002854 <HAL_UART_RxCpltCallback+0x98>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d13b      	bne.n	800284a <HAL_UART_RxCpltCallback+0x8e>
		if(u8_pesData == 'F' ){
 80027d2:	4b21      	ldr	r3, [pc, #132]	; (8002858 <HAL_UART_RxCpltCallback+0x9c>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b46      	cmp	r3, #70	; 0x46
 80027d8:	d106      	bne.n	80027e8 <HAL_UART_RxCpltCallback+0x2c>
			byHeadIsTrue = 1;
 80027da:	4b20      	ldr	r3, [pc, #128]	; (800285c <HAL_UART_RxCpltCallback+0xa0>)
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
			i_pes = 0;
 80027e0:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <HAL_UART_RxCpltCallback+0xa4>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	e029      	b.n	800283c <HAL_UART_RxCpltCallback+0x80>
		}
		else{
			if(byHeadIsTrue){
 80027e8:	4b1c      	ldr	r3, [pc, #112]	; (800285c <HAL_UART_RxCpltCallback+0xa0>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d021      	beq.n	8002834 <HAL_UART_RxCpltCallback+0x78>
				pesBuff[i_pes++] = u8_pesData;
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <HAL_UART_RxCpltCallback+0xa4>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	b2d1      	uxtb	r1, r2
 80027f8:	4a19      	ldr	r2, [pc, #100]	; (8002860 <HAL_UART_RxCpltCallback+0xa4>)
 80027fa:	7011      	strb	r1, [r2, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b16      	ldr	r3, [pc, #88]	; (8002858 <HAL_UART_RxCpltCallback+0x9c>)
 8002800:	7819      	ldrb	r1, [r3, #0]
 8002802:	4b18      	ldr	r3, [pc, #96]	; (8002864 <HAL_UART_RxCpltCallback+0xa8>)
 8002804:	5499      	strb	r1, [r3, r2]
				if(i_pes > 2){
 8002806:	4b16      	ldr	r3, [pc, #88]	; (8002860 <HAL_UART_RxCpltCallback+0xa4>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d916      	bls.n	800283c <HAL_UART_RxCpltCallback+0x80>
					pesDigitalRawData = pesBuff[1] << 8 | pesBuff[0];
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <HAL_UART_RxCpltCallback+0xa8>)
 8002810:	785b      	ldrb	r3, [r3, #1]
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	b21a      	sxth	r2, r3
 8002816:	4b13      	ldr	r3, [pc, #76]	; (8002864 <HAL_UART_RxCpltCallback+0xa8>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b21b      	sxth	r3, r3
 800281c:	4313      	orrs	r3, r2
 800281e:	b21b      	sxth	r3, r3
 8002820:	b29a      	uxth	r2, r3
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_UART_RxCpltCallback+0xac>)
 8002824:	801a      	strh	r2, [r3, #0]
					i_pes = 0;
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <HAL_UART_RxCpltCallback+0xa4>)
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
					byHeadIsTrue = 0;
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_UART_RxCpltCallback+0xa0>)
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
 8002832:	e003      	b.n	800283c <HAL_UART_RxCpltCallback+0x80>
				}
			}
			else{
				pesDigitalRawData = 0xFFFF;
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <HAL_UART_RxCpltCallback+0xac>)
 8002836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800283a:	801a      	strh	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(UartReceive, &u8_pesData, 1);
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_UART_RxCpltCallback+0x98>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2201      	movs	r2, #1
 8002842:	4905      	ldr	r1, [pc, #20]	; (8002858 <HAL_UART_RxCpltCallback+0x9c>)
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe ffdc 	bl	8001802 <HAL_UART_Receive_IT>
	}
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200000c8 	.word	0x200000c8
 8002858:	200000cc 	.word	0x200000cc
 800285c:	200000cd 	.word	0x200000cd
 8002860:	200000ce 	.word	0x200000ce
 8002864:	200000d0 	.word	0x200000d0
 8002868:	2000000a 	.word	0x2000000a

0800286c <__libc_init_array>:
 800286c:	b570      	push	{r4, r5, r6, lr}
 800286e:	2600      	movs	r6, #0
 8002870:	4d0c      	ldr	r5, [pc, #48]	; (80028a4 <__libc_init_array+0x38>)
 8002872:	4c0d      	ldr	r4, [pc, #52]	; (80028a8 <__libc_init_array+0x3c>)
 8002874:	1b64      	subs	r4, r4, r5
 8002876:	10a4      	asrs	r4, r4, #2
 8002878:	42a6      	cmp	r6, r4
 800287a:	d109      	bne.n	8002890 <__libc_init_array+0x24>
 800287c:	f000 f822 	bl	80028c4 <_init>
 8002880:	2600      	movs	r6, #0
 8002882:	4d0a      	ldr	r5, [pc, #40]	; (80028ac <__libc_init_array+0x40>)
 8002884:	4c0a      	ldr	r4, [pc, #40]	; (80028b0 <__libc_init_array+0x44>)
 8002886:	1b64      	subs	r4, r4, r5
 8002888:	10a4      	asrs	r4, r4, #2
 800288a:	42a6      	cmp	r6, r4
 800288c:	d105      	bne.n	800289a <__libc_init_array+0x2e>
 800288e:	bd70      	pop	{r4, r5, r6, pc}
 8002890:	f855 3b04 	ldr.w	r3, [r5], #4
 8002894:	4798      	blx	r3
 8002896:	3601      	adds	r6, #1
 8002898:	e7ee      	b.n	8002878 <__libc_init_array+0xc>
 800289a:	f855 3b04 	ldr.w	r3, [r5], #4
 800289e:	4798      	blx	r3
 80028a0:	3601      	adds	r6, #1
 80028a2:	e7f2      	b.n	800288a <__libc_init_array+0x1e>
 80028a4:	08002a68 	.word	0x08002a68
 80028a8:	08002a68 	.word	0x08002a68
 80028ac:	08002a68 	.word	0x08002a68
 80028b0:	08002a6c 	.word	0x08002a6c

080028b4 <memset>:
 80028b4:	4603      	mov	r3, r0
 80028b6:	4402      	add	r2, r0
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d100      	bne.n	80028be <memset+0xa>
 80028bc:	4770      	bx	lr
 80028be:	f803 1b01 	strb.w	r1, [r3], #1
 80028c2:	e7f9      	b.n	80028b8 <memset+0x4>

080028c4 <_init>:
 80028c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c6:	bf00      	nop
 80028c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ca:	bc08      	pop	{r3}
 80028cc:	469e      	mov	lr, r3
 80028ce:	4770      	bx	lr

080028d0 <_fini>:
 80028d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d2:	bf00      	nop
 80028d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d6:	bc08      	pop	{r3}
 80028d8:	469e      	mov	lr, r3
 80028da:	4770      	bx	lr
